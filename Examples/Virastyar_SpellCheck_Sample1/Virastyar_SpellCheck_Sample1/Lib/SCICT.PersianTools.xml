<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SCICT.PersianTools</name>
    </assembly>
    <members>
        <member name="T:SCICT.NLP.Persian.Constants.PartOfSpeech">
            <summary>
            Persian EAGLE Compatible POS Tag Representer
            </summary>
        </member>
        <member name="T:SCICT.NLP.Persian.Constants.POSAnnotation">
            <summary>
             Set of annotations used for defining a part fo speech
            </summary>
        </member>
        <member name="M:SCICT.NLP.Persian.Constants.POSAnnotation.ToString(System.Enum)">
            <summary>
            Converts a annotation into standard string.
            </summary>
            <param name="annotation">The annotation (defined in this class) to be converted</param>
            <returns>Equivalant string of annotation</returns>
        </member>
        <member name="M:SCICT.NLP.Persian.Constants.POSAnnotation.Parse(System.String)">
            <summary>
            
            </summary>
            <param name="annotation"></param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Utility.FilterResultsWithStats">
            <summary>
            Contains the result of persian char filters applied and the statistics of the changes made
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.FilterResultsWithStats.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.FilterResultsWithStats"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="numLetters">number of letters.</param>
            <param name="numDigits">number of digits.</param>
            <param name="numErabs">number of erabs.</param>
            <param name="numHalfSpaces">number of half-space characters.</param>
        </member>
        <member name="P:SCICT.NLP.Utility.FilterResultsWithStats.Result">
            <summary>
            Gets or sets the result of filtering
            </summary>
            <value>The result of filtering.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.FilterResultsWithStats.NumLetters">
            <summary>
            Gets or sets the number of letters affected
            </summary>
            <value>The number of letters affected.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.FilterResultsWithStats.NumDigits">
            <summary>
            Gets or sets the number of digits affected
            </summary>
            <value>The number of digits affected.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.FilterResultsWithStats.NumErabs">
            <summary>
            Gets or sets the number of erabs affected
            </summary>
            <value>The number of erabs affected.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.FilterResultsWithStats.NumHalfSpaces">
            <summary>
            Gets or sets the number of half-spaces affected
            </summary>
            <value>The number of half-spaces affected.</value>
        </member>
        <member name="T:SCICT.NLP.Persian.Constants.PseudoSpace">
            <summary>
            Holds PseudoSpace related constants
            TODO: Complete this class based on unicode spaces, specified here:
            http://www.cs.tut.fi/~jkorpela/chars/spaces.html
            http://www.alanwood.net/unicode/general_punctuation.html
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PseudoSpace.ZWNJ">
            <summary>
            The main standard PseudoSpace (Zero Width Non-Joiner)
            Value: U+200C
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PseudoSpace.ZWS">
            <summary>
            alternative PseudoSpace (Zero Width Space)
            Value: U+200B
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PseudoSpace.ZWJ">
            <summary>
            alternative PseudoSpace (Zero Width Joiner)
            Value: U+200D
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PseudoSpace.MSWPS">
            <summary>
            alternative PseudoSpace used by Microsoft Word (Ctrl + -)
            Value: U+00AC
            </summary>
        </member>
        <member name="T:SCICT.NLP.Persian.Constants.HeYe">
            <summary>
            Holds He-ye related constants
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.HeYe.ArabicHamzaAbove">
            <summary>
            A single hamza letter which is going to be used as the standard short-from Ye.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.HeYe.ArabicHeWithYeAbove">
            <summary>
            A single character containing both He and Ye in a single glyph.
            This is a non-standard character in Persian contexts.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.HeYe.ArabicHeGoalWithYeAbove">
            <summary>
            A single character containing both He and Ye in a single glyph. 
            This is a non-standard character in Persian contexts.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.HeYe.ArabicHamzah">
            <summary>
            Arabic Hamzah, which is sometimes used as Yeh following Pseudo-space and Heh
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.HeYe.He">
            <summary>
            Standard character He
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.HeYe.StandardLongHeYe">
            <summary>
            Standard form of writing long HeYe (i.e., ه‌ی)
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.HeYe.StandardShortHeYe">
            <summary>
            Standard form of writing short HeYe (i.e., هٔ)
            </summary>
        </member>
        <member name="M:SCICT.NLP.Persian.Constants.HeYe.IsTwoWordsFormingLongHeYe(System.String,System.String)">
            <summary>
            Determines whether the specified word sequence is forming a long HeYe.
            </summary>
            <param name="word0">first word</param>
            <param name="word1">second word</param>
            <returns>
            	<c>true</c> if the specified word sequence is forming a long HeYe; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Persian.Constants.HeYe.Load">
            <summary>
            Loads this instance.
            </summary>
        </member>
        <member name="T:SCICT.NLP.Persian.Constants.PersianAlphabets">
            <summary>
            Holds constants related to the persian language
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.Tashdid">
            <summary>
            The standard tashdid character.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.Delimiters">
            <summary>
            Persian Delimiters
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.Numbers">
            <summary>
             Numbers
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsStickerInAllCondition">
            <summary>
             Consonant sticker letters
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsStickerConditional">
            <summary>
             Conditional Consonant sticker letters
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsNonStickerInAllCondition">
            <summary>
             Consonant non-sticker letters
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsNonStickerConditional">
            <summary>
             Conditional Consonant non-sticker letters
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsStickerInAllCondition">
            <summary>
             Vowel sticker letters
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsStickerConditional">
            <summary>
             Vowel sticker letters
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsNonStickerInAllCondition">
            <summary>
             Vowel non-sticker letters
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsNonStickerConditional">
            <summary>
             Vowel non-sticker letters
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.Diacritics">
            <summary>
             Pseudo letters like Shaddah and Fathatan
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.Erabs">
            <summary>
            Erabs
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianAlphabets.NonStickerChars">
            <summary>
            Persian Characters which are always seperate, and cannot stick to a next char
            </summary>
        </member>
        <member name="M:SCICT.NLP.Persian.Constants.PersianAlphabets.Load">
            <summary>
            Loads this instance.
            </summary>
        </member>
        <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.Alphabets">
            <summary>
            Persian Alphabets
            </summary>
        </member>
        <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.AlphabetWithPseudoSpace">
            <summary>
             Persian Alphabets with Pseudo-space (ZWNJ)
            </summary>
        </member>
        <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.Consonants">
            <summary>
             Consonant letters
            </summary>
        </member>
        <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsInAllConditions">
            <summary>
             Consonant letters
            </summary>
        </member>
        <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsConditional">
            <summary>
             Consonant letters
            </summary>
        </member>
        <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsStickers">
            <summary>
             Consonant letters
            </summary>
        </member>
        <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.ConsonantsNonStickers">
            <summary>
             Consonant letters
            </summary>
        </member>
        <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.Vowels">
            <summary>
             Vowel letters
            </summary>
        </member>
        <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsInAllCondition">
            <summary>
             Vowel letters
            </summary>
        </member>
        <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsConditional">
            <summary>
             Vowel letters
            </summary>
        </member>
        <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsStickers">
            <summary>
             Vowel letters
            </summary>
        </member>
        <member name="P:SCICT.NLP.Persian.Constants.PersianAlphabets.VowelsNonStickers">
            <summary>
             Vowel letters
            </summary>
        </member>
        <member name="T:SCICT.NLP.Persian.Constants.PersianHomophoneLetters">
            <summary>
             Homophone letters in Persian, homophone words are those that can pronounce the same
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.ZainFamily">
            <summary>
             Zain homophone family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.SeenFamily">
            <summary>
             Seen homophone family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.TehFamily">
            <summary>
             Teh homophone family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.GhainFamily">
            <summary>
             Ghain homophone family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.HahFamily">
            <summary>
             Hah homophone family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.AlefFamily">
            <summary>
             Alef homophone family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.HamzaFamily1">
            <summary>
             Hamza homophone family 1
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.HamzaFamily2">
            <summary>
             Hamza homophone family 2
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.YaFamily">
            <summary>
             Ya homophone family
            </summary>
        </member>
        <member name="M:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.AreHomophone(System.Char,System.Char)">
            <summary>
             Check if two letters are homophone
            </summary>
            <param name="c1">c1</param>
            <param name="c2">c2</param>
            <returns>True if c1 and c2 are homophone</returns>
        </member>
        <member name="P:SCICT.NLP.Persian.Constants.PersianHomophoneLetters.AllHomophones">
            <summary>
             Get all homophone letters
            </summary>
        </member>
        <member name="T:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters">
            <summary>
             Homoshape letters in Persian, homophone words are those that can pronounce the same
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.AlefFamily">
            <summary>
             Alef homoshape family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.BeFamily">
            <summary>
             Be homoshape family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.TehFamily">
            <summary>
             Teh homoshape family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.HahFamily">
            <summary>
             Hah homoshape family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.XahFamily">
            <summary>
             Xah homoshape family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.DalFamily">
            <summary>
             Dal homoshape family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.ZehFamily">
            <summary>
             Zeh homoshape family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.ZainFamily">
            <summary>
             Zain homoshape family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.ZathFamily">
            <summary>
             Zath homoshape family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.GhainFamily">
            <summary>
             Ghain homoshape family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.KafFamily">
            <summary>
             Kaf homoshape family
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.GhafFamily">
            <summary>
             Ghaf homoshape family
            </summary>
        </member>
        <member name="M:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.AreHomoshape(System.Char,System.Char)">
            <summary>
             Check if two letters are homoshape
            </summary>
            <param name="c1">c1</param>
            <param name="c2">c2</param>
            <returns>True if c1 and c2 are homoshape</returns>
        </member>
        <member name="P:SCICT.NLP.Persian.Constants.PersianHomoshapeLetters.AllHomoshapes">
            <summary>
             Get all homophone letters
            </summary>
        </member>
        <member name="T:SCICT.NLP.Persian.Constants.StandardCharacters">
            <summary>
            Holds constants about Persian standard character codes
            </summary>
        </member>
        <member name="M:SCICT.NLP.Persian.Constants.StandardCharacters.Load">
            <summary>
            Loads this instance.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardKaaf">
            <summary>
            The Standard Kaaf letter code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardYaa">
            <summary>
            The Standard Yaa letter code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit0">
            <summary>
            The Standard Digit 0 code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit1">
            <summary>
            The Standard Digit 1 code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit2">
            <summary>
            The Standard Digit 2 code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit3">
            <summary>
            The Standard Digit 3 code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit4">
            <summary>
            The Standard Digit 4 code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit5">
            <summary>
            The Standard Digit 5 code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit6">
            <summary>
            The Standard Digit 6 code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit7">
            <summary>
            The Standard Digit 7 code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit8">
            <summary>
            The Standard Digit 8 code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardDigit9">
            <summary>
            The Standard Digit 9 code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardHalfSpace">
            <summary>
            The Standard Half Space code in Persian keyboard: 0x200C
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardTashdid">
            <summary>
            The Standard Tashdid letter code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardFathatan">
            <summary>
            The Standard Fathatan letter code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardFatha">
            <summary>
            The Standard Fatha letter code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardZamma">
            <summary>
            The Standard Zamma letter code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardSaaken">
            <summary>
            The Standard Saaken letter code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardZammatan">
            <summary>
            The Standard Zammatan letter code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardKasra">
            <summary>
            The Standard Kasra letter code in Persian keyboard
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.StandardCharacters.StandardKasratan">
            <summary>
            The Standard Kasratan letter code in Persian keyboard
            </summary>
        </member>
        <member name="T:SCICT.NLP.Persian.Constants.WordSpecialCharacters">
            <summary>
            Character codes which are used by Microsoft Word for special purposes
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FormulaDelimiterCode">
            <summary>
            Code for the character used to delimit formulas in Word 2003.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FootnoteDelimiterCode">
            <summary>
            Code for the character used to delimit footnotes.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FormulaDelimiter">
            <summary>
            Character used to delimit formulas in Word 2003
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FormulaDelimiterReplacementString">
            <summary>
            Replacement String in Persian for the formula special character
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FormulaDelimiterReplacementRTF">
            <summary>
            Replacement RTF-String in Persian for the formula special character
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FootnoteDelimiter">
            <summary>
            Character used to delimit footnotes
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FootnoteDelimiterReplacementString">
            <summary>
            Replacement String in Persian for the footnote special character
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.FootnoteDelimiterReplacementRTF">
            <summary>
            Replacement RTF-String in Persian for the footnote special character
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.WordSpecialCharacters.SpecialCharsArray">
            <summary>
            An array of special characters used by Microsoft Word for special purposes.
            </summary>
        </member>
        <member name="T:SCICT.NLP.Persian.Constants.QuotationMark">
            <summary>
             Quotation Marks
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.QuotationMark.SingleQuotationMark">
            <summary>
            ASCII representation of single quotation mark
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.QuotationMark.RightSingleQuotationMark">
            <summary>
             Right quotation mark as seen in printed content
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.QuotationMark.SingleLow9QuotationMark">
            <summary>
             Right quotation mark as seen in printed content
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.QuotationMark.SingleHighReveresed9QuotationMark">
            <summary>
             Single Low-9 Quotation Mark
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.QuotationMark.Prime">
            <summary>
             Character which is used to show 'prime' in mathematical context.
            </summary>
        </member>
        <member name="T:SCICT.NLP.Persian.Constants.PersianPOSTag">
            <summary>
             Persian Part-of-Speech (POS) tags
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.ADV">
            <summary>
             Adverb
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.AJ">
            <summary>
             Adjective
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.CL">
            <summary>
             Measurment Units
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.CONJ">
            <summary>
             Conjunction
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.DET">
            <summary>
             Determiner
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.INT">
            <summary>
             Interjection 
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.N">
            <summary>
             Noun
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.NUM">
            <summary>
             Numbers
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.P">
            <summary>
             Preposition
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.POSTP">
            <summary>
             Postposition 
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.PRO">
            <summary>
             Pronoun
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.PUNC">
            <summary>
             Punctuation
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.RES">
            <summary>
             Rests, Not recognized
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.V">
            <summary>
             Verb
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.UserPOS">
            <summary>
             User aadded words, not yet tagged
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.VowelEnding">
            <summary>
             Ends with a vowel
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianPOSTag.ConsonantalEnding">
            <summary>
             Ends with a consonant
            </summary>
        </member>
        <member name="T:SCICT.NLP.Persian.Constants.PersianCombinationSpacingState">
            <summary>
             The state of combination spacing of two Persian words
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianCombinationSpacingState.PseudoSpace">
            <summary>
             Combine with Pseudo-space
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianCombinationSpacingState.WhiteSpace">
            <summary>
             Combine seprately by a white space
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.Constants.PersianCombinationSpacingState.Continous">
            <summary>
             Combine with no space and make a word
            </summary>
        </member>
        <member name="T:SCICT.NLP.Utility.Calendar.CalendarStringUtils">
            <summary>
            Some string utility functions for creating date-strings.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.CalendarStringUtils.GetPresianJalaliMonthName(System.Int32)">
            <summary>
            Gets the name of the Nth Jalali month in Presian.
            </summary>
            <param name="n">The month number.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.CalendarStringUtils.GetPersianGregorianMonthName(System.Int32)">
            <summary>
            Gets the name of the Nth Gregorian month in Persian.
            </summary>
            <param name="n">The month number.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.CalendarStringUtils.GetPersianGhamariMonthName(System.Int32)">
            <summary>
            Gets the name of the Nth Ghamari month in Persian .
            </summary>
            <param name="n">The n.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.CalendarStringUtils.GetPersianWeekdayName(SCICT.NLP.Utility.Parsers.Weekdays)">
            <summary>
            Gets the name of the weekday in Persian.
            </summary>
            <param name="w">The weekday to get its name</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.CalendarStringUtils.GetWeekdayFromDayOfWeek(System.DayOfWeek)">
            <summary>
            Gets the <see cref="T:SCICT.NLP.Utility.Parsers.Weekdays"/> value for the <see cref="T:System.DayOfWeek"/>.
            <see cref="T:System.DayOfWeek"/> is an enum defined in the System namespace of the .NET Framework.
            </summary>
            <param name="d">The day of the week.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.CalendarStringUtils.GetPersianDateString(System.DateTime)">
            <summary>
            Gets the persian date string from its Gregorian equivalant.
            The string is a descriptive statement in Persian Language.
            </summary>
            <param name="dt">The date-time instance for the Gregorian date.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.CalendarStringUtils.GetPersianDateString(SCICT.NLP.Utility.Parsers.DateCalendarType,SCICT.NLP.Utility.Parsers.Weekdays,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a date description string from the specified values and calendar types.
            The string is a descriptive statement in Persian Language.
            </summary>
            <param name="t">The type of calendar.</param>
            <param name="w">The day of the week.</param>
            <param name="dayNumber">The day of the month.</param>
            <param name="monthNum">The month number.</param>
            <param name="yearNum">The year number.</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx">
            <summary>
            Extension class for the Hijri Calendar, to make working with this calendar more handy
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Calendar.HijriCalendarEx.dt">
            <summary>
            The Gregorian date of the calendar.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Calendar.HijriCalendarEx.hc">
            <summary>
            The Hijri Calendar object of the Framework
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx"/> class.
            </summary>
            <param name="dt">The date-time to be converted in Gregorian calendar.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx"/> class.
            </summary>
            <param name="year">The year (in Hijri Ghamari).</param>
            <param name="month">The month (in Hijri Ghamari).</param>
            <param name="day">The day (in Hijri Ghamari).</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx"/> class.
            </summary>
            <param name="year">The year (in Hijri Ghamari).</param>
            <param name="month">The month (in Hijri Ghamari).</param>
            <param name="day">The day (in Hijri Ghamari).</param>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="secs">The seconds.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetYear">
            <summary>
            Gets the year in Hijri Ghamari calendar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetMonth">
            <summary>
            Returns the month (in the Hijri Ghamari calendar)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetDayOfMonth">
            <summary>
            Gets the day of the month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetDayOfWeek">
            <summary>
            Gets the day of week.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetHour">
            <summary>
            Gets the hour value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetMinute">
            <summary>
            Gets the minutes value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetSecond">
            <summary>
            Gets the second value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetMilliseconds">
            <summary>
            Gets the milliseconds value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetMonthsInYear(System.Int32)">
            <summary>
            Gets the number of months in the specified year in the current era.
            </summary>
            <param name="year">An integer that represents the year.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetDayOfYear">
            <summary>
            Gets the day of the year.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetLeapMonth(System.Int32)">
            <summary>
            Calculates the leap month for a specified year.
            </summary>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetEra">
            <summary>
            Gets the era.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetDaysInYear(System.Int32)">
            <summary>
            Gets the number of days in th specified year of the current era.
            </summary>
            <param name="year">An integer representing year.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.GetDaysInMonth(System.Int32,System.Int32)">
            <summary>
            Gets the number of days in specified year and month of the current era.
            </summary>
            <param name="year">An integer representing the year.</param>
            <param name="month">An integer representing the month.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            The format of the returned string is "yy/mm/dd".
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            If the format string provided equals "D" then a string describing the current date in Persian language is returned.
            Otherwise, the format of the returned string would be "yy/mm/dd".
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.TryParse(System.String,SCICT.NLP.Utility.Calendar.HijriCalendarEx@)">
            <summary>
            Converts the string representation of a Hijri Ghamari Date, to a <see cref="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx"/> Instance. A return 
            value indicates whether the operation succeeded. The string can contain a numberical representation of a date,
            or a literal date description in Persian language.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="pcOut">If the conversion operation succeeds this will hold the result, 
            otherwise it will be set to null.</param>
            <returns>true if the operation succeeds, otherwise false.</returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.TryParseLiteralDate(System.String)">
            <summary>
            Converts the string representation of a Hijri Ghamari Date, to a <see cref="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx"/> Instance. A return 
            value indicates whether the operation succeeded. The string can contain a literal date description in Persian language.
            </summary>
            <param name="str">The string to convert.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.HijriCalendarEx.TryParseNumericDate(System.String)">
            <summary>
            Converts the string representation of a Hijri Ghamari Date, to a <see cref="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx"/> Instance. A return 
            value indicates whether the operation succeeded. The string can contain a numberical representation of a date.
            </summary>
            <param name="str">The string to convert.</param>
            <returns></returns>
        </member>
        <member name="P:SCICT.NLP.Utility.Calendar.HijriCalendarEx.DateTime">
            <summary>
            Gets the date time object that holds the Gregorian representation of the current calendar object.
            </summary>
            <value>The date time.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Calendar.HijriCalendarEx.Now">
            <summary>
            Gets a <see cref="T:SCICT.NLP.Utility.Calendar.HijriCalendarEx"/> instance that is set to the current date and time of the local machine.
            </summary>
        </member>
        <member name="T:SCICT.NLP.Utility.MathUtils">
            <summary>
            Some mathematical utility methods, and string utility methods related to mathematics
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.MathUtils.IsPowerOfTen(System.Int64)">
            <summary>
            Determines whether the specified number is power of ten.
            </summary>
            <param name="n">The number</param>
            <returns>
            	<c>true</c> if the specified number is power of ten; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.MathUtils.DigitCount(System.Int64)">
            <summary>
            Gets the number of digits of the specified number.
            </summary>
            <param name="n">The number.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.MathUtils.RemoveTrailingZeros(System.String)">
            <summary>
            Removes the trailing zeros from the string representation of a number.
            Has some usage in dealing with the mantissa of numbers.
            </summary>
            <param name="p">The string representation of a number.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.MathUtils.NormalizeForF20Format(System.String)">
            <summary>
            Normalizes the string representation of a number that is converted to string with F20 format.
            It removes the trailing zeros, and if the mantissa consists all 
            of zeros the decimal point is also removed.
            </summary>
            <param name="p">The string representation of a number.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.MathUtils.InsertThousandSeperator(System.String)">
            <summary>
            Inserts english thousand seperator characters in proper positions inside the string containig a number.
            </summary>
            <param name="str">The string containing a number.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.MathUtils.CreateOrdinalNumber(System.String)">
            <summary>
            Creates the ordinal string from the main number string. e.g. "سه" --> "سوم"
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Persian.ICharFilter">
            <summary>
            Interface to Character Filters that provide means to replace non-standard characters with
            their standard ones.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Persian.ICharFilter.FilterChar(System.Char)">
            <summary>
            Filters the char and returns the string for its filtered (i.e. standardized) equivalant.
            The string may contain 0, 1, or more characters.
            If the length of the string is 0, then the character should have been left out.
            If the length of the string is 1, then the character might be left intact or replaced with another character.
            If the length of the string is more than 1, then there have been no 1-character replacement for this character.
            It is replaced with 2 or more characters. e.g. some fonts have encoded Tashdid, and Tanvin in one character. 
            To make it standard this character is replaced with 2 characters, one for Tashdid, and the other for Tanvin.
            </summary>
            <param name="ch">The character to filter.</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Utility.NumberToPersianString">
            <summary>
            Provides the means to convert long integer and double numbers to a Persian descriptive string.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.NumberToPersianString.TryConvertNumberToPersianString(System.Int64,System.String@)">
            <summary>
            Tries to convert a long integer number to a descriptive string in Persian language. A return value indicates
            whether the operation succeeded or not.
            </summary>
            <param name="n">The number to convert.</param>
            <param name="str">The string that holds the result.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.NumberToPersianString.TryConvertNumberToPersianString(System.Double,System.String@)">
            <summary>
            Tries to convert a double number to a descriptive string in Persian language. A return value indicates
            whether the operation succeeded or not.
            </summary>
            <param name="d">The double number to convert.</param>
            <param name="str">The string that holds the result.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.NumberToPersianString.ToString(System.Int32)">
            <summary>
            Converts an integer number to its written form in Persian
            </summary>
            <param name="x">The integer to convert.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.NumberToPersianString.ToString(System.Int64)">
            <summary>
            Converts a long number to its written form in Persian
            </summary>
            <param name="x">The long integer number to convert</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:SCICT.NLP.Utility.NumberToPersianString.ConvertUpTo100(System.Int64)">
            <summary>
            Converts the number to its equivalant persian string. 
            The number should not have more than 3 digits.
            </summary>
            <param name="n">The number to convert</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx">
            <summary>
            Extension class for the Persian Calendar, to make working with this calendar more handy
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Calendar.PersianCalendarEx.dt">
            <summary>
            The Gregorian date of the calendar.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Calendar.PersianCalendarEx.pc">
            <summary>
            The Persian Calendar object of the Framework
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx"/> class.
            </summary>
            <param name="dt">The date-time to be converted in Gregorian calendar.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx"/> class from Gregorian date values.
            </summary>
            <param name="year">The year (in Jalali).</param>
            <param name="month">The month (in Jalali).</param>
            <param name="day">The day (in Jalali).</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx"/> class from Gregorian date values.
            </summary>
            <param name="year">The year (in Jalali).</param>
            <param name="month">The month (in Jalali).</param>
            <param name="day">The day (in Jalali).</param>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="secs">The seconds.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetYear">
            <summary>
            Gets the year in Jalali calendar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetMonth">
            <summary>
            Returns the month (in the Jalali calendar)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetDayOfMonth">
            <summary>
            Gets the day of the month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetDayOfWeek">
            <summary>
            Gets the day of week.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetHour">
            <summary>
            Gets the hour value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetMinute">
            <summary>
            Gets the minutes value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetSecond">
            <summary>
            Gets the second value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetMilliseconds">
            <summary>
            Gets the milliseconds value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetMonthsInYear(System.Int32)">
            <summary>
            Gets the number of months in the specified year in the current era.
            </summary>
            <param name="year">An integer that represents the year.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetDayOfYear">
            <summary>
            Gets the day of the year.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetLeapMonth(System.Int32)">
            <summary>
            Calculates the leap month for a specified year.
            </summary>
            <param name="year">The year.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetEra">
            <summary>
            Gets the era.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetDaysInYear(System.Int32)">
            <summary>
            Gets the number of days in th specified year of the current era.
            </summary>
            <param name="year">An integer representing year.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.GetDaysInMonth(System.Int32,System.Int32)">
            <summary>
            Gets the number of days in specified year and month of the current era.
            </summary>
            <param name="year">An integer representing the year.</param>
            <param name="month">An integer representing the month.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current Persian Calendar Format. 
            The format of the returned string is "yy/mm/dd".
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current Persian Calendar.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current Persian Calendar Format. 
            If the format string provided equals "D" then a string describing the current date in Persian language is returned.
            Otherwise, the format of the returned string would be "yy/mm/dd".
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.TryParse(System.String,SCICT.NLP.Utility.Calendar.PersianCalendarEx@)">
            <summary>
            Converts the string representation of a Persian Date, to a <see cref="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx"/> Instance. A return 
            value indicates whether the operation succeeded. The string can contain a numberical representation of a date,
            or a literal date description in Persian language.
            </summary>
            <param name="str">The string to convert.</param>
            <param name="pcOut">If the conversion operation succeeds this will hold the result, 
            otherwise it will be set to null.</param>
            <returns>true if the operation succeeds, otherwise false.</returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.TryParseLiteralDate(System.String)">
            <summary>
            Converts the string representation of a Persian Date, to a <see cref="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx"/> Instance. A return 
            value indicates whether the operation succeeded. The string can contain a literal date description in Persian language.
            </summary>
            <param name="str">The string to convert.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Calendar.PersianCalendarEx.TryParseNumericDate(System.String)">
            <summary>
            Converts the string representation of a Persian Date, to a <see cref="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx"/> Instance. A return 
            value indicates whether the operation succeeded. The string can contain a numberical representation of a date.
            </summary>
            <param name="str">The string to convert.</param>
            <returns></returns>
        </member>
        <member name="P:SCICT.NLP.Utility.Calendar.PersianCalendarEx.DateTime">
            <summary>
            Gets the date time object that holds the Gregorian representation of the current calendar object.
            </summary>
            <value>The date time.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Calendar.PersianCalendarEx.Now">
            <summary>
            Gets a <see cref="T:SCICT.NLP.Utility.Calendar.PersianCalendarEx"/> instance that is set to the current date and time of the local machine.
            </summary>
        </member>
        <member name="T:SCICT.NLP.Persian.PersianCharFilter">
            <summary>
            Filter for the Persian characters that provide means for replacing non-standard characters with their standard ones.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.PersianCharFilter.m_dicCharFilterings">
            <summary>
            dictionary that maps character codes (i.e. their integer value) to their refined string.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.PersianCharFilter.m_dicCharCategories">
            <summary>
            dictionary that maps character codes to their filtering category that the character belongs
            </summary>
        </member>
        <member name="M:SCICT.NLP.Persian.PersianCharFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Persian.PersianCharFilter"/> class. And fills the 
            data-structures holding filtering data in a hard-coded way.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Persian.PersianCharFilter.AddCodesToCategory(SCICT.NLP.Persian.FilteringCharacterCategory,System.Int32[])">
            <summary>
            Adds a sequence of character codes to a filtering category
            </summary>
            <param name="category">The filtering category.</param>
            <param name="codes">The codes.</param>
        </member>
        <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char)">
            <summary>
            Filters the char and returns the string for its filtered (i.e. standardized) equivalant.
            The string may contain 0, 1, or more characters.
            If the length of the string is 0, then the character should have been left out.
            If the length of the string is 1, then the character might be left intact or replaced with another character.
            If the length of the string is more than 1, then there have been no 1-character replacement for this character.
            It is replaced with 2 or more characters. e.g. some fonts have encoded Tashdid, and Tanvin in one character.
            To make it standard this character is replaced with 2 characters, one for Tashdid, and the other for Tanvin.
            </summary>
            <param name="ch">The character to filter.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char,SCICT.NLP.Persian.FilteringCharacterCategory)">
            <summary>
            Filters the char and returns the string for its filtered (i.e. standardized) equivalant.
            The string may contain 0, 1, or more characters.
            If the length of the string is 0, then the character should have been left out.
            If the length of the string is 1, then the character might be left intact or replaced with another character.
            If the length of the string is more than 1, then there have been no 1-character replacement for this character.
            It is replaced with 2 or more characters. e.g. some fonts have encoded Tashdid, and Tanvin in one character.
            To make it standard this character is replaced with 2 characters, one for Tashdid, and the other for Tanvin.
            </summary>
            <param name="ch">The character to filter.</param>
            <param name="ignoreCats">The filtering categories to be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char,System.Collections.Generic.HashSet{System.Char})">
            <summary>
            Filters the char and returns the string for its filtered (i.e. standardized) equivalant.
            The string may contain 0, 1, or more characters.
            If the length of the string is 0, then the character should have been left out.
            If the length of the string is 1, then the character might be left intact or replaced with another character.
            If the length of the string is more than 1, then there have been no 1-character replacement for this character.
            It is replaced with 2 or more characters. e.g. some fonts have encoded Tashdid, and Tanvin in one character.
            To make it standard this character is replaced with 2 characters, one for Tashdid, and the other for Tanvin.
            </summary>
            <param name="ch">The character to filter.</param>
            <param name="ignoreList">The characters to be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char,System.Collections.Generic.HashSet{System.Char},SCICT.NLP.Persian.FilteringCharacterCategory)">
            <summary>
            Filters the char and returns the string for its filtered (i.e. standardized) equivalant.
            The string may contain 0, 1, or more characters.
            If the length of the string is 0, then the character should have been left out.
            If the length of the string is 1, then the character might be left intact or replaced with another character.
            If the length of the string is more than 1, then there have been no 1-character replacement for this character.
            It is replaced with 2 or more characters. e.g. some fonts have encoded Tashdid, and Tanvin in one character.
            To make it standard this character is replaced with 2 characters, one for Tashdid, and the other for Tanvin.
            </summary>
            <param name="ch">The character to filter.</param>
            <param name="ignoreList">The characters to be ignored.</param>
            <param name="ignoreCats">The filtering categories to be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterString(System.String)">
            <summary>
            Filters every character of the string and returns the filtered string. To see how each character is 
            filtered see: <see cref="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char)"/>
            </summary>
            <param name="str">The string to be filtered.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterString(System.String,SCICT.NLP.Persian.FilteringCharacterCategory)">
            <summary>
            Filters every character of the string and returns the filtered string. To see how each character is 
            filtered see: <see cref="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char)"/>
            </summary>
            <param name="str">The string to be filtered.</param>
            <param name="ignoreCats">The filtering categories to be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterString(System.String,System.Collections.Generic.HashSet{System.Char})">
            <summary>
            Filters every character of the string and returns the filtered string. To see how each character is 
            filtered see: <see cref="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char)"/>
            </summary>
            <param name="str">The string to be filtered.</param>
            <param name="ignoreList">The characters to be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterString(System.String,System.Collections.Generic.HashSet{System.Char},SCICT.NLP.Persian.FilteringCharacterCategory)">
            <summary>
            Filters every character of the string and returns the filtered string. To see how each character is 
            filtered see: <see cref="M:SCICT.NLP.Persian.PersianCharFilter.FilterChar(System.Char)"/>
            </summary>
            <param name="str">The string to be filtered.</param>
            <param name="ignoreList">The characters to be ignored.</param>
            <param name="ignoreCats">The filtering categories to be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Persian.PersianCharFilter.FilterStringWithStats(System.String,System.Collections.Generic.HashSet{System.Char},SCICT.NLP.Persian.FilteringCharacterCategory)">
            <summary>
            Filters the given string with the given options while returning the filtered string as well as filtering statistics.
            </summary>
            <param name="str">The string to filter.</param>
            <param name="ignoreList">list of characters to ignore.</param>
            <param name="ignoreCats">The character-categories to ignore.</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Persian.FilteringCharacterCategory">
            <summary>
            The main filtering categories used by Persian Char Filters to replace non-standard characters,
            with their standard equivalents.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.FilteringCharacterCategory.Kaaf">
            <summary>
            Filter all kinds of Kaaf
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.FilteringCharacterCategory.Yaa">
            <summary>
            Filter all kinds of Yaa
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.FilteringCharacterCategory.HalfSpace">
            <summary>
            Filter all kinds of Half-space
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.FilteringCharacterCategory.ArabicDigit">
            <summary>
            Filter arabic digits, and replaces them with their Persian counter-part.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Persian.FilteringCharacterCategory.Erab">
            <summary>
            Filter all kinds of Erabs. Some fonts have their own customized 
            erab characters, which are considered as non-standard.
            </summary>
        </member>
        <member name="T:SCICT.Utility.GUI.PersianMessageBox">
            <summary>
            A Persian Message Box
            </summary>
        </member>
        <member name="M:SCICT.Utility.GUI.PersianMessageBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.Utility.GUI.PersianMessageBox"/> class.
            </summary>
        </member>
        <member name="M:SCICT.Utility.GUI.PersianMessageBox.Show(System.String)">
            <summary>
            Opens a persian message box.
            </summary>
            <param name="text">The message to be shown.</param>
            <returns>The button pressed</returns>
        </member>
        <member name="M:SCICT.Utility.GUI.PersianMessageBox.Show(System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Opens a persian message box.
            </summary>
            <param name="text">The message to be shown.</param>
            <param name="icon">The icon to be shown.</param>
            <returns>The button pressed</returns>
        </member>
        <member name="M:SCICT.Utility.GUI.PersianMessageBox.Show(System.String,System.String)">
            <summary>
            Opens a persian message box.
            </summary>
            <param name="text">The message to be shown.</param>
            <param name="caption">The caption of the message box.</param>
            <returns>The button pressed</returns>
        </member>
        <member name="M:SCICT.Utility.GUI.PersianMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Opens a persian message box.
            </summary>
            <param name="text">The message to be shown.</param>
            <param name="caption">The caption of the message box.</param>
            <param name="buttons">The buttons of the message box.</param>
            <returns>The button pressed</returns>
        </member>
        <member name="M:SCICT.Utility.GUI.PersianMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Opens a persian message box.
            </summary>
            <param name="text">The message to be shown.</param>
            <param name="caption">The caption of the message box.</param>
            <param name="buttons">The buttons of the message box.</param>
            <param name="icon">The icon to be shown.</param>
            <returns>The button pressed</returns>
        </member>
        <member name="M:SCICT.Utility.GUI.PersianMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Opens a persian message box.
            </summary>
            <param name="text">The message to be shown.</param>
            <param name="caption">The caption of the message box.</param>
            <param name="buttons">The buttons of the message box.</param>
            <param name="icon">The icon to be shown.</param>
            <param name="defaultButton">The default button.</param>
            <returns>The button pressed</returns>
        </member>
        <member name="M:SCICT.Utility.GUI.PersianMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Opens a persian message box.
            </summary>
            <param name="text">The message to be shown.</param>
            <param name="caption">The caption of the message box.</param>
            <param name="buttons">The buttons of the message box.</param>
            <param name="icon">The icon to be shown.</param>
            <param name="defaultButton">The default button.</param>
            <returns>The button pressed</returns>
        </member>
        <member name="F:SCICT.Utility.GUI.PersianMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SCICT.Utility.GUI.PersianMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SCICT.Utility.GUI.PersianMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.DigitizedNumberParser">
            <summary>
            Tries to parse numbers in digits. Also tries to avoid numbers as part of calculations.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.DigitizedNumberParser.FindAndParse(System.String)">
            <summary>
            Searches the specified string for digitized number patterns, and tries to parse the patterns found.
            </summary>
            <param name="str">The string to be searched.</param>
            <returns>A sequence of <see cref="T:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo"/> objects which contain 
            information about the patterns found.</returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo">
            <summary>
            Will contain information about the Digitized Numbers found in a string 
            as returned by <see cref="T:SCICT.NLP.Utility.Parsers.DigitizedNumberParser"/> class.
            </summary>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.IPatternInfo">
            <summary>
            Defines the main interface to xPatternInfo classes which all implement this interface.
            </summary>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.IPatternInfo.PatternInfoType">
            <summary>
            Gets the type of the pattern info.
            </summary>
            <value>The type of the pattern info.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.IPatternInfo.Content">
            <summary>
            Gets the content of the found pattern.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.IPatternInfo.Index">
            <summary>
            Gets the index of the original string at which the found pattern begins.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.IPatternInfo.Length">
            <summary>
            Gets the length of the found pattern.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo.#ctor(System.String,System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo"/> class.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
            <param name="len">The length of the found pattern.</param>
            <param name="number">The parsed number.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo"/>.
            </returns>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo.Content">
            <summary>
            Gets the content of the found pattern.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo.Index">
            <summary>
            Gets the index of the original string at which the found pattern begins.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo.Length">
            <summary>
            Gets the length of the found pattern.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo.Number">
            <summary>
            Gets the number parsed from the pattern.
            </summary>
            <value>The number.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo.PatternInfoType">
            <summary>
            Gets the type of the pattern info.
            </summary>
            <value>The type of the pattern info.</value>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.EnglishDateParser">
            <summary>
            Provides the means to search some input string and finding and parsing 
            all occurrances of written-forms of dates in English language.
            By English Date we do not only mean Gregorian date. It means all Jalali, 
            Gregorian, and Hijri Ghamari dates which are written in English Language.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.WeekdayPattern">
            <summary>
            Returns the regex pattern for the Week-day part in an English date.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.DayNumPattern">
            <summary>
            Returns the regex pattern for the day number (in month) in an English date, which can only be digits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.MonthNamePattern">
            <summary>
            Returns the regex pattern for all possible month-names in all possible calendar types in English language, ORed together.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.YearPattern">
            <summary>
            Returns the regex pattern for the year part of an English date, which can only be digits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.EnglishDatePattern">
            <summary>
            Returns the complete regex pattern for an English date.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.FindAndParse(System.String)">
            <summary>
            Searches the specified string for patterns of English dates, and
            returns a sequnce of <see cref="T:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo"/> that holds information about the pattern found.
            </summary>
            <param name="str">The string to search.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.ExtractFromEnglishDate(System.Text.RegularExpressions.Match)">
            <summary>
            Parses and extracts information from the found regex match object 
            containing an English date.
            The parsed pattern info is returned, and null is returned if 
            the Match does not contain valid data.
            </summary>
            <param name="m">The regex match object to be parsed.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.ExtractYearNum(System.Text.RegularExpressions.Match)">
            <summary>
            Extracts and parses the year number part.
            </summary>
            <param name="m">The regex Match object to parse.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.ExtractMonthNum(System.Text.RegularExpressions.Match)">
            <summary>
            Extracts and parses the Month number part.
            </summary>
            <param name="m">The regex Match object to parse.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.ExtractDayNum(System.Text.RegularExpressions.Match)">
            <summary>
            Extracts and parses the day number.
            </summary>
            <param name="m">The regex Match object to parse.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.ExtractWeekday(System.Text.RegularExpressions.Match)">
            <summary>
            Extracts and parses the week-day.
            </summary>
            <param name="m">The regex Match object to parse.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.EnglishWeekday(System.String)">
            <summary>
            Returns the day of the week from the given string containing week-day in English.
            Returns Illegal if the specified string does not contain valid week-day.
            </summary>
            <param name="str">The string containing day of the week in English.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.EnglishMonthNum(System.String)">
            <summary>
            Returns the month number from the input string. The month number ranges vary for different calendar types.
            The return value ranges are as follows:
            -1      Illegal
            1 - 12  Jalali
            13 - 24 Gregorian
            25 - 36 HijriGhamari
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDateParser.NthWeekday(System.Int32)">
            <summary>
            Returns the Nth day of the week for numbers between 0 and 6 inclusive.
            Returns Illegal othewise.
            </summary>
            <param name="n">The number to return week-day based upon. 
            The number for Saturday is Zero.</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo">
            <summary>
            Class to hold information about the parsed English date patterns.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.#ctor(System.String,System.Int32,System.Int32,SCICT.NLP.Utility.Parsers.DateCalendarType,SCICT.NLP.Utility.Parsers.Weekdays,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo"/> class.
            </summary>
            <param name="content">The m_content.</param>
            <param name="index">The m_index.</param>
            <param name="length">The length of the pattern found.</param>
            <param name="t">The type of the calendar.</param>
            <param name="w">The day of the week.</param>
            <param name="dayNo">The day number (in month).</param>
            <param name="monthNo">The month number.</param>
            <param name="yearNo">The year number.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.Content">
            <summary>
            Gets the content of the found pattern.
            </summary>
            <value>The m_content.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.Index">
            <summary>
            Gets the index of the original string at which the found pattern begins.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.Length">
            <summary>
            Gets the length of the found pattern.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.CalendarType">
            <summary>
            Gets the type of the calendar.
            </summary>
            <value>The type of the calendar.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.Weekday">
            <summary>
            Gets the day of the week.
            </summary>
            <value>The day of the week.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.DayNumber">
            <summary>
            Gets the day number (in month).
            </summary>
            <value>The day number.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.MonthNumber">
            <summary>
            Gets the month number.
            </summary>
            <value>The month number.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.YearNumber">
            <summary>
            Gets the year number.
            </summary>
            <value>The year number.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.EnglishDatePatternInfo.PatternInfoType">
            <summary>
            Gets the type of the pattern info.
            </summary>
            <value>The type of the pattern info.</value>
        </member>
        <member name="T:SCICT.NLP.Utility.PersianParsers.NumberParsersSuggestions">
            <summary>
            Contains utility methods for creating and managing suggestions for number verifiers
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.PersianParsers.NumberParsersSuggestions.CreateSuggestions(SCICT.NLP.Utility.Parsers.IPatternInfo)">
            <summary>
            Creates suggestions for the given pattern info
            </summary>
            <param name="pi">the pattern info object to create suggestions for</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.PersianParsers.NumberParsersSuggestions.CreateSuggestions(SCICT.NLP.Utility.PersianParsers.NumberChangeRule,SCICT.NLP.Utility.Parsers.IPatternInfo)">
            <summary>
            Creates suggestions for the given pattern info
            </summary>
            <param name="rule">the change rules that give order to the suggestions</param>
            <param name="pi">the pattern info object to create suggestions for</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.PersianParsers.NumberParsersSuggestions.CreateDigitizedNumberSuggestions(SCICT.NLP.Utility.PersianParsers.NumberChangeRule,SCICT.NLP.Utility.Parsers.DigitizedNumberPatternInfo)">
            <summary>
            Creates suggestions for the given pattern info
            </summary>
            <param name="rule">the change rules that give order to the suggestions</param>
            <param name="pi">the pattern info object to create suggestions for</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.PersianParsers.NumberParsersSuggestions.CreateGeneralNumberSuggestions(SCICT.NLP.Utility.PersianParsers.NumberChangeRule,SCICT.NLP.Utility.Parsers.GeneralNumberInfo)">
            <summary>
            Creates suggestions for the given pattern info
            </summary>
            <param name="rule">the change rules that give order to the suggestions</param>
            <param name="pi">the pattern info object to create suggestions for</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.NumericDateParser">
            <summary>
            Provides the means to search some input string and finding and parsing 
            all occurrances of numeric forms of dates. e.g. 10/10/2007 or 1-7-74
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.NumericDatePattern">
            <summary>
            Returns the regex pattern for the numeric dates
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.FindAndParse(System.String)">
            <summary>
            Searches the specified string for patterns of numeric dates, and
            returns a sequnce of <see cref="T:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo"/> that holds information about the pattern found.
            </summary>
            <param name="str">The string to search.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.CheckConsistency(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Checks the consistency of the found date pattern. 
            It first checks the consistancy of the seperators (see <see cref="M:SCICT.NLP.Utility.Parsers.NumericDateParser.CheckSeperators(System.Text.RegularExpressions.Match,System.String@)"/>).
            Then checks the consistancy of the date itself. e.g. 25.02.07 is a date but
            25.02.07.05 might be an IP address. Thus patterns containing more than 3 digit sections
            are not considered as dates.
            </summary>
            <param name="m">The regex Match object containing numeric date.</param>
            <param name="str">The original string inside which the numeric date pattern was found.
            Actually it is the context of the found pattern.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.CheckSeperators(System.Text.RegularExpressions.Match,System.String@)">
            <summary>
            Checks the consistency of seperators in a date string.
            e.g. 12/01/2007 and 12-01-2007 are consistant but 12-01/2007 is not.
            </summary>
            <param name="m">The regex match object containing the english date.</param>
            <param name="sep">The consistant seperator string (if any).</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.ExtractFromNumericDate(System.Text.RegularExpressions.Match)">
            <summary>
            Parses and extracts information from the found regex Match object 
            containing a numeric date.
            The parsed pattern info is returned, and null is returned if 
            the Match does not contain valid data.
            </summary>
            <param name="m">The regex Match object to be parsed.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.FindDateParts(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Tries to guess the three main date parts from the provided three numbers.
            </summary>
            <param name="num1">The 1st number.</param>
            <param name="num2">The 2nd number.</param>
            <param name="num3">The 3rd number.</param>
            <param name="year">The year guessed.</param>
            <param name="month">The month guessed.</param>
            <param name="day">The day guessed.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.ExtractNum(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Extracts and parses the number section of the specified 
            group name from the regex Match object.
            </summary>
            <param name="m">The regex Match object to be parsed.</param>
            <param name="grpName">Name of the (regex) group.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.NumericDateParser.NthWeekday(System.Int32)">
            <summary>
            Returns the Nth day of the week for numbers between 0 and 6 inclusive.
            Returns Illegal othewise.
            </summary>
            <param name="n">The number to return week-day based upon. 
            The number for Saturday is Zero.</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo">
            <summary>
            Class to hold information about the parsed numeric date patterns.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo"/> class.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
            <param name="length">The length of the pattern found.</param>
            <param name="dayNo">The day number (in month).</param>
            <param name="monthNo">The month number.</param>
            <param name="yearNo">The year number.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.Content">
            <summary>
            Gets the content of the found pattern.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.Index">
            <summary>
            Gets the index of the original string at which the found pattern begins.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.Length">
            <summary>
            Gets the length of the found pattern.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.DayNumber">
            <summary>
            Gets the day number (in month).
            </summary>
            <value>The day number.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.MonthNumber">
            <summary>
            Gets the month number.
            </summary>
            <value>The month number.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.YearNumber">
            <summary>
            Gets the year number.
            </summary>
            <value>The year number.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.NumericDatePatternInfo.PatternInfoType">
            <summary>
            Gets the type of the pattern info.
            </summary>
            <value>The type of the pattern info.</value>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.ParsingUtils">
            <summary>
            A Utility class which is mainly used by parsers.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ParsingUtils.ConvertNumber2English(System.String)">
            <summary>
            Converts the string containing numbers from Persian/Arabic to English. 
            This includes digits, decimal points, and thousand seperators.
            </summary>
            <param name="num">The string of number to convert.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ParsingUtils.ConvertNumber2Persian(System.String)">
            <summary>
            Converts the string containing numbers from English/Arabic to Persian. 
            This includes digits, decimal points, and thousand seperators.
            </summary>
            <param name="num">The string of number to convert.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ParsingUtils.NormalizeSpaces(System.String)">
            <summary>
            Normalizes the spaces. Replaces multiple occurrances of 
            white-space characters to a single space character.
            </summary>
            <param name="str">The string.</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.PatternInfoTypes">
            <summary>
            Enumerates different types of xPatternInfo classes.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.PatternInfoTypes.EnglishDate">
            <summary>
            used by EnglishDatePatternInfo class
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.PatternInfoTypes.NumericDate">
            <summary>
            used by NumericDatePatternInfo class
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.PatternInfoTypes.PersianDate">
            <summary>
            used by PersianDatePatternInfo class
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.PatternInfoTypes.PersianNumber">
            <summary>
            used by PersianNumberPatternInfo class
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.PatternInfoTypes.DigitizedNumber">
            <summary>
            used by DigitizedNumberPatternInfo class
            </summary>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.PersianDateParser">
            <summary>
            Provides the means to search some input string and finding and parsing 
            all occurrances of written-forms of dates in Persian language.
            By Persian Date we do not only mean Jalali date. It means all Jalali, 
            Gregorian, and Hijri Ghamari dates which are written in Persian Language.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.PersianDateParser.persianNumberParser">
            <summary>
            Persian number parser to help parse written number parts in date descriptions
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.WeekdayPattern">
            <summary>
            Returns regex pattern for week-day part of the date pattern
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.DayNumPattern">
            <summary>
            Returns the regex pattern for the day-number (in month) part of the date description
            which can also be in persian written form.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.MonthNamePattern">
            <summary>
            Returns the regex pattern for all possible month names in all the supported calendar types, ORed together.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.YearPattern">
            <summary>
            Returns the regex pattern for the year part of the date,
            which can be either digits or written numbers in Persian.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.PersianDatePattern">
            <summary>
            Returns the complete regex date pattern in Persian.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.FindAndParse(System.String)">
            <summary>
            Searches the specified string for patterns of dates in a Persian descriptive string, and
            returns a sequnce of <see cref="T:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo"/> that holds information about the pattern found.
            </summary>
            <param name="str">The string to search.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.ExtractFromPersianDate(System.Text.RegularExpressions.Match)">
            <summary>
            Extracts and parses date information from a regex Match instance.
            </summary>
            <param name="m">The regex Match instance containing date pattern.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.ExtractYearNum(System.Text.RegularExpressions.Match)">
            <summary>
            Extracts and parses the year number from the given regex Match instance.
            </summary>
            <param name="m">The regex Match instance to extract year number from.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.ExtractMonthNum(System.Text.RegularExpressions.Match)">
            <summary>
            Extracts and parses the month number from the given regex Match instance.
            </summary>
            <param name="m">The regex Match instance to extract month number from.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.ExtractDayNum(System.Text.RegularExpressions.Match)">
            <summary>
            Extracts and parses the day number from the given regex Match instance.
            </summary>
            <param name="m">The regex Match instance to extract day number from.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.ExtractWeekday(System.Text.RegularExpressions.Match)">
            <summary>
            Extracts and parses the week-day from the given regex Match instance.
            </summary>
            <param name="m">The regex Match instance to extract week-day from.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.PersianMonthNum(System.String)">
            <summary>
            Returns the month number from the input string. The month number ranges vary for different calendar types.
            The return value ranges are as follows:
            -1      Illegal
            1 - 12  Jalali
            13 - 24 Gregorian
            25 - 36 HijriGhamari
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianDateParser.NthWeekday(System.Int32)">
            <summary>
            Returns the  Nth day of the week for numbers between 0 and 6 inclusive.
            Returns Illegal othewise.
            </summary>
            <param name="n">The number to return week-day based upon. 
            The number for Saturday is Zero.</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo">
            <summary>
            Class to hold information about the parsed persian date patterns
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.#ctor(System.String,System.Int32,System.Int32,SCICT.NLP.Utility.Parsers.DateCalendarType,SCICT.NLP.Utility.Parsers.Weekdays,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo"/> class.
            </summary>
            <param name="content">The content.</param>
            <param name="index">The index.</param>
            <param name="length">The length of the found pattern.</param>
            <param name="t">The calendar type.</param>
            <param name="w">The day of the week.</param>
            <param name="dayNo">The day number (in month).</param>
            <param name="monthNo">The month number.</param>
            <param name="yearNo">The year number.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.Content">
            <summary>
            Gets the content of the found pattern.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.Index">
            <summary>
            Gets the index of the original string at which the found pattern begins.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.Length">
            <summary>
            Gets the length of the found pattern.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.CalendarType">
            <summary>
            Gets the type of the calendar.
            </summary>
            <value>The type of the calendar.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.Weekday">
            <summary>
            Gets the day of the week.
            </summary>
            <value>The weekday.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.DayNumber">
            <summary>
            Gets the day number in the month.
            </summary>
            <value>The day number in the month.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.MonthNumber">
            <summary>
            Gets the month number.
            </summary>
            <value>The month number.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.YearNumber">
            <summary>
            Gets the year number.
            </summary>
            <value>The year number.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.PersianDatePatternInfo.PatternInfoType">
            <summary>
            Gets the type of the pattern info.
            </summary>
            <value>The type of the pattern info.</value>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.Weekdays">
            <summary>
            Enumeration for the week-days
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Illeagal">
            <summary>
            week-day not defined
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Sat">
            <summary>
            Saturday
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Sun">
            <summary>
            Sunday
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Mon">
            <summary>
            Monday
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Tue">
            <summary>
            Tuesday
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Wed">
            <summary>
            Wednesday
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Thu">
            <summary>
            Thursday
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.Weekdays.Fri">
            <summary>
            Friday
            </summary>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.DateCalendarType">
            <summary>
            Enumerates different calendar types supported by this library
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.DateCalendarType.Illegal">
            <summary>
            Calendar-Type not defined
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.DateCalendarType.Gregorian">
            <summary>
            Gregorian Calendar Type
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.DateCalendarType.Jalali">
            <summary>
            Jalali Calendar Type
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.DateCalendarType.HijriGhamari">
            <summary>
            Hijri Ghamari Calendar Type
            </summary>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.PersianLiteral2NumMap">
            <summary>
            Utility class that helps convert string of 
            Persian literals of long numbers to long numbers, and vice versa.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.PersianLiteral2NumMap.perStr2IntTable">
            <summary>
            Dictionary that maps string of numbers in Persian to their long value. 
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.PersianLiteral2NumMap.perInt2StrTable">
            <summary>
            Dictionary that maps long values to the their string in Persian.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianLiteral2NumMap.InitPersianStringTable">
            <summary>
            Initializes the Persian string tables (i.e. dictionaries).
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianLiteral2NumMap.#cctor">
            <summary>
            Initializes the <see cref="T:SCICT.NLP.Utility.Parsers.PersianLiteral2NumMap"/> class and fills the dictionaries.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianLiteral2NumMap.TryPersianString2Num(System.String,System.Int64@)">
            <summary>
            Tries to convert a Persian string containing litteral form of a number to its equivalant value.
            A return value indicates whether the operation succeeded or not.
            </summary>
            <param name="str">The string containing litteral form of a number to convert.</param>
            <param name="n">The converted number.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianLiteral2NumMap.TryNum2PersianString(System.Int64,System.String@)">
            <summary>
            Tries to convert a long number to its equivalant Persian string containing litteral form of that number.
            A return value indicates whether the operation succeeded or not.
            </summary>
            <param name="n">The number to convert.</param>
            <param name="str">The converted string containing litteral form of a number to convert.</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.PersianNumberParser">
            <summary>
            Provides the means to search some input string and find and parse
            all occurrances of written-forms of persian integer numbers.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.PersianNumberPattern">
            <summary>
            Returns the whole pattern of a persian written number
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.BlockPlusMultiplier">
            <summary>
            Returns the pattern of 3-digit blocks plus the multipliers.
            Named As MULTIPLIER_GROUP_NAME
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.ThreeDigitBlockPattern">
            <summary>
            Returns the regex pattern of three-digit-blocks 
            (i.e. umbers lower than 1000 which are main building blocks of larger numbers).
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.AllUpToTens">
            <summary>
            Returns the regex pattern for the Hundreds and Tens (not lower, and not between). e.g. 110, 920 (NOT 117).
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.AllUpToOnesAndTenOnes">
            <summary>
            Returns regex pattern for 3-digit numbers from ones to ten-and ones. e.g. 117, 308 (NOT 120).
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.OnesPattern">
            <summary>
            returns the regex pattern for numbers from 1 to 9.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.TensPattern">
            <summary>
            Returns the pattern for 10 mulitipliers from 20 to 90 ORed together.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.TenOnesPattern">
            <summary>
            Returns the regex pattern for 10 to 19 ORed together
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.HundsPattern">
            <summary>
            Returns regex patterns for the multipliers of 100. e.g. سیصد، دویست، نهصد، صد
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.OrdinalityPattern">
            <summary>
            returns the pattern that makes numbers ordinal. i.e. adds "م" and "ام" in the end.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.MultipliersPattern">
            <summary>
            Named As MULTIPLIER_NAME
            Containing only the grand coefficients ORed together, e.g. "میلیون", "میلیارد"
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.FindAndParse(System.String)">
            <summary>
            Searches the specified string for patterns of integer numbers in a persian descriptive string, and
            returns a sequnce of <see cref="T:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo"/> that holds information about the pattern found.
            </summary>
            <param name="str">The string to search.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.ExtractFromPersianNumber(System.Text.RegularExpressions.Match)">
            <summary>
            Parses and extracts information from the found regex match object 
            for the persian integer number in descriptive written form.
            The parsed pattern info is returned, and null is returned if 
            the Match does not contain valid data.
            </summary>
            <param name="m">The regex match object to be parsed.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.ExtractMultiplierAndNumber(System.String)">
            <summary>
            Extracts and parses the multiplier and number from the specified string.
            </summary>
            <param name="str">The string to be parsed.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.ExtractThreeDB(System.String)">
            <summary>
            Extracts and parses the three digit block from the specified string.
            </summary>
            <param name="str">The string to extract number from.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberParser.ExtractHundreds(System.Text.RegularExpressions.Match)">
            <summary>
            Extracts and parses the hundreds from the specified regex Match object provided.
            </summary>
            <param name="m">The regex match object to extract from.</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo">
            <summary>
            Class to hold information about the parsed persian number patterns
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo.#ctor(System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo"/> class.
            </summary>
            <param name="content">The content of the pattern.</param>
            <param name="index">The index.</param>
            <param name="len">The length of the pattern.</param>
            <param name="number">The number parsed from the pattern.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo.Content">
            <summary>
            Gets the content of the found pattern.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo.Index">
            <summary>
            Gets the index of the original string at which the found pattern begins.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo.Length">
            <summary>
            Gets the length of the found pattern.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo.Number">
            <summary>
            Gets the number.
            </summary>
            <value>The number.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.PersianNumberPatternInfo.PatternInfoType">
            <summary>
            Gets the type of the pattern info.
            </summary>
            <value>The type of the pattern info.</value>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.PersianRealNumberParser">
            <summary>
            Provides the means to search some input string and find and parse
            all occurrances of written-forms of persian real numbers.
            The numbers can be integer, floating point, or fractions.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.s_setAllChunkWords">
            <summary>
            HashSet that holds all possible words which can occur in a written form of a number in Persian language.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.#cctor">
            <summary>
            Initializes the <see cref="T:SCICT.NLP.Utility.Parsers.PersianRealNumberParser"/> class. 
            By adding all possible words which might be encountered into a Persian
            real number string to the set of words.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.AddWordToSet(System.String)">
            <summary>
            Adds the word of number and its ordinal form to set of possible words.
            </summary>
            <param name="word">The word to add.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.FindChunks(System.String)">
            <summary>
            Finds the chunk of words in the input string in which there could probably numbers be found.
            </summary>
            <param name="input">The input string.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.FindAndParse(System.String)">
            <summary>
            Searches the specified string for patterns of real numbers in a persian descriptive string, and
            returns a sequnce of <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo"/> that holds information about the pattern found.
            </summary>
            <param name="input">The string to search.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.ListNeedToBeTrimmed(System.Collections.Generic.List{System.Int64},System.Int32@,System.Int32@)">
            <summary>
            Determines whether the list of numbers need to be trimmed. 
            Since the list of numbers is gained from chunks in input, they may contain 
            some tokens at their beginning or ending, which are valid in chunks, but does not make
            a valid beginning or ending for a number. e.g. vaav is an example.
            </summary>
            <param name="lstValues">The list of long values.</param>
            <param name="start">The start index after trimming the list.</param>
            <param name="end">The end index after trimming the list.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.ExtractGeneralNumber(SCICT.NLP.Utility.Parsers.ChunkInfo)">
            <summary>
            Extracts and returns a sequence of all occurrances of real numbers in the specified chunk.
            </summary>
            <param name="chunk">The chunk to extract real numbers from.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.CanExtractTwoIntegersFrom(SCICT.NLP.Utility.Parsers.ChunkInfo,SCICT.NLP.Utility.Parsers.GeneralNumberInfo@,SCICT.NLP.Utility.Parsers.GeneralNumberInfo@)">
            <summary>
            Determines whether two adjacent integers can be extracted from the specified chunk.
            </summary>
            <param name="chunk">The chunk holding elements and values.</param>
            <param name="num1">The 1st number.</param>
            <param name="num2">The 2nd number.</param>
            <returns>
            	<c>true</c> if two adjacent integers can be extracted from the specified chunk; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.ExtractAllIntsFromList(System.Collections.Generic.List{System.Int64})">
            <summary>
            Extracts all integer numbers that can be extracted from the specified list of element-values.
            </summary>
            <param name="lstValues">The List of values to extract integer numbers from.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.ExtractIntegerNumber(SCICT.NLP.Utility.Parsers.ChunkInfo)">
            <summary>
            Extracts and returns sequence of all occurrances of integer numbers from the specified chunk.
            This method does NOT ignore possible ordinal-Miim at the end of the number.
            </summary>
            <param name="chunk">The chunk to extract integer numbers from.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.ExtractIntegerNumber(SCICT.NLP.Utility.Parsers.ChunkInfo,System.Boolean)">
            <summary>
            Extracts and returns sequence of all occurrances of integer numbers from the specified chunk.
            </summary>
            <param name="chunk">The chunk to extract integer numbers from.</param>
            <param name="ignoreMiim">if set to <c>true</c> ignores the ordinal-Miim at the end of the number (if any).</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.GetWordNumericValue(System.String)">
            <summary>
            Gets the numeric value of the specified word which can occur in the written-form of a Persian real number. 
            This includes the symbolic constants also.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.GenerateFloatingPartFrom(System.Collections.Generic.List{System.Int64},System.Int32)">
            <summary>
            Generates the floating part of a number from the values specified by the list of values starting from
            the specified floating point index.
            </summary>
            <param name="lstValues">The list of values.</param>
            <param name="dotIndex">Index of the floating dot.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.GenerateIntegralPartFrom(System.Collections.Generic.List{System.Int64},System.Int32,System.Int32)">
            <summary>
            Creates a long integer number from the list of chunk-element values starting from
            the index specified by the <paramref name="from"/> parameter to the index specified by
            the <paramref name="to"/> parameter inclusively.
            </summary>
            <param name="lstValues">The list of values.</param>
            <param name="from">Index of the lower bound.</param>
            <param name="to">Index of the upper bound.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.ReadTopNumber(System.Collections.Generic.List{System.Int64},System.Int64@,System.Int32@)">
            <summary>
            Reads and removes the top number from the list of values. 
            Returns the number read via an out parameter, and 
            updates the index variable from the caller context by incrementing it.
            </summary>
            <param name="lstValues">The list of values.</param>
            <param name="number">The number read.</param>
            <param name="outsideIndex">Index variable in the caller context.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.PersianRealNumberParser.AreNumbersAddable(System.Int64,System.Int64)">
            <summary>
            Checks whether two numbers can be added if they come next to each other in the written form of a Persian number.
            e.g. 10 and 12 are not addable, 300 and 400 are not addable, but 300 and 50 are addable.
            </summary>
            <param name="big">The bigger number.</param>
            <param name="small">The smaller number.</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo">
            <summary>
            Holds information about the content and location of the real numbers found.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.#ctor(System.String,System.Int64,SCICT.NLP.Utility.Parsers.FloatingPartInfo,System.Int32,System.Int32,System.Collections.Generic.List{SCICT.NLP.Utility.Parsers.ChunkElement})">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo"/> class which holds a valid chunk of numbers.
            </summary>
            <param name="content">The content.</param>
            <param name="integralPart">The integral part.</param>
            <param name="floatingPart">The floating part.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <param name="lstChunkElements">The list of chunk elements.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.#ctor(System.String,System.Int32,System.Int32,System.Collections.Generic.List{SCICT.NLP.Utility.Parsers.ChunkElement})">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo"/> class which holds an INVALID chunk of numbers.
            The content created by this constructor is used for debugging purposes.
            </summary>
            <param name="content">The content.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <param name="lstChunkElement">The list of chunk elements.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.GetValue">
            <summary>
            Gets the value for this instance of <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo"/>.
            </returns>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.Content">
            <summary>
            Gets the content of the found pattern.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.IntegralPart">
            <summary>
            Gets the integral part of the number
            </summary>
            <value>The integral part.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.FloatingPart">
            <summary>
            Gets the floating part of the number (if any). Could be null.
            </summary>
            <value>The floating part.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.StartIndex">
            <summary>
            Gets the start index of the found pattern of the number.
            </summary>
            <value>The start index.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.EndIndex">
            <summary>
            Gets the end index of the found pattern of the number.
            </summary>
            <value>The end index.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.ListChunkElements">
            <summary>
            Gets the list of chunk elements.
            </summary>
            <value>The list of chunk elements.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.IsFraction">
            <summary>
            Gets a value indicating whether the floating part of this instance is fraction. e.g. 1/3 (one third).
            If the return value is false, then the floating part is an ordinary floating number. e.g. 0.333
            </summary>
            <value>
            	<c>true</c> if this instance is fraction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.FractionString">
            <summary>
            Gets the string reperesentation of the floating part of the number shown as a fraction.
            The string returned by this property is suitable for showing a right-to-left context.
            </summary>
            <value>The fraction string.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.IsInvalid">
            <summary>
            Gets a value indicating whether this instance is invalid.
            Invalid instance holds just parsed chunk-elements which do not construct a valid number together.
            </summary>
            <value>
            	<c>true</c> if this instance is invalid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.PatternInfoType">
            <summary>
            Gets the type of the pattern info.
            </summary>
            <value>The type of the pattern info.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.Index">
            <summary>
            Gets the index of the original string at which the found pattern begins.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.GeneralNumberInfo.Length">
            <summary>
            Gets the length of the found pattern.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfoComparer">
            <summary>
            An implementation of IComparer to compare instances of <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo"/>.
            The comparison is mainly based upon the Numbers' location.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.GeneralNumberInfoComparer.Compare(SCICT.NLP.Utility.Parsers.GeneralNumberInfo,SCICT.NLP.Utility.Parsers.GeneralNumberInfo)">
            <summary>
            Compares two instances of <see cref="T:SCICT.NLP.Utility.Parsers.GeneralNumberInfo"/> and returns a value indicating whether one is less than, equal to, or greater than the other.
            The comparison is mainly based upon the Numbers' location.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero <paramref name="x"/> is less than <paramref name="y"/>.
            Zero <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.FloatingPartInfo">
            <summary>
            Holds information about the Floating Part of a number, including its nominator and denominator.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.FloatingPartInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.FloatingPartInfo"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.FloatingPartInfo"/>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.FloatingPartInfo.GetDoubleValue">
            <summary>
            Gets the double value for this instance of floating part.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.FloatingPartInfo.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.FloatingPartInfo"/> class.
            The value for denominator is deduced from the number of digits of the numerator.
            e.g. if numerator is 5, denominator would be 10, or if numerator is 123 then the denominator would be 1000.
            </summary>
            <param name="numerator">The numerator.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.FloatingPartInfo.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.FloatingPartInfo"/> class.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.FloatingPartInfo.Numerator">
            <summary>
            Gets the numerator.
            </summary>
            <value>The numerator.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.FloatingPartInfo.Denominator">
            <summary>
            Gets the denominator.
            </summary>
            <value>The denominator.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.FloatingPartInfo.Type">
            <summary>
            Gets the type of the floating part: fraction or floating.
            </summary>
            <value>The type of the floating part.</value>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.FloatingPartInfo.FloatingPartType">
            <summary>
            Enumerates different types of Floating Part of a number
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.FloatingPartInfo.FloatingPartType.Floating">
            <summary>
            Having a decimal point and floating part numbers following. e.g. 0.3333
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.FloatingPartInfo.FloatingPartType.Fraction">
            <summary>
            Expressing floating part by a fraction e.g. 1/3 (one-third).
            </summary>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.ChunkInfo">
            <summary>
            Holds information about each chunk of possible real numbers in written form in Persian
            language. This information contains the content and location of the whole chunk, and the
            collection of information about all the elements of the chunks.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ChunkInfo.#ctor(System.String,System.Int32,System.Int32,System.Collections.Generic.List{SCICT.NLP.Utility.Parsers.ChunkElement})">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.ChunkInfo"/> class.
            </summary>
            <param name="content">The content.</param>
            <param name="stIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <param name="lstChunkElements">The List of chunk elements.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ChunkInfo.GetSubChunk(System.Int32)">
            <summary>
            Returns the subset of the chunk, with elements starting at the specified index.
            </summary>
            <param name="startIndex">The index of the chunk element from which the new chunk will be made.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ChunkInfo.GetSubChunk(System.Int32,System.Int32)">
            <summary>
            Returns the subset of the chunk, with elements starting at the specified start index, and 
            finishing with the element at the specified end index.
            </summary>
            <param name="startIndex">The index of the chunk element from which the new chunk will be made.</param>
            <param name="endIndex">The index of the chunk element which form the upper bound of the sub-chunk.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ChunkInfo.GetChunkIndexFromValueIndex(System.Int32)">
            <summary>
            Retrieves the index of the chunk element from the specified index of the chunk-element values.
            Note that chunk-element indeces and chunk-element value indices are not one to one.
            e.g. "نیم" comprises one chunk-element but 4 chunk-element values: { MOMAYEZ, 5, 10, MIIM }.
            </summary>
            <param name="n">The chunk-element VALUES index.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ChunkInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.ChunkInfo"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.ChunkInfo"/>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ChunkInfo.GetAllChunkElementValues">
            <summary>
            Gets all chunk element values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ChunkInfo.ListToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Utility function that converts a sequence of values to string.
            </summary>
            <typeparam name="T">The type of the sequence elements.</typeparam>
            <param name="seq">The sequence of values to be converted to string.</param>
            <returns></returns>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.ChunkInfo.Content">
            <summary>
            Gets the content of the chunk.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.ChunkInfo.StartIndex">
            <summary>
            Gets the chunk start index.
            </summary>
            <value>The start index.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.ChunkInfo.EndIndex">
            <summary>
            Gets the chunk end index.
            </summary>
            <value>The end index.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.ChunkInfo.ListChunkElements">
            <summary>
            Gets the list of chunk elements.
            </summary>
            <value>The list of chunk elements.</value>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.ChunkElement">
            <summary>
            Holds information about each building block of a real number in written form 
            and their location. 
            That would be the digits, and the symbols such as vaav, [ordinal] miim, momayez
            (i.e. floating point) and so on.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ChunkElement.#ctor(System.String,System.Int64[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.ChunkElement"/> class.
            </summary>
            <param name="content">The content.</param>
            <param name="elementValues">The element values.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ChunkElement.#ctor(System.String,System.Int64,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.ChunkElement"/> class.
            </summary>
            <param name="content">The content.</param>
            <param name="elementValue">The element value.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ChunkElement.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.ChunkElement"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:SCICT.NLP.Utility.Parsers.ChunkElement"/>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ChunkElement.IsEqualTo(SCICT.NLP.Utility.Parsers.ChunkElement)">
            <summary>
            Determines whether the specified chunk element is equal to this instance.
            </summary>
            <param name="c">The chunk element to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified chunk element is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ChunkElement.AreEqual(SCICT.NLP.Utility.Parsers.ChunkElement,SCICT.NLP.Utility.Parsers.ChunkElement)">
            <summary>
            Determines whether two chunk elements are equal.
            Two chunk elements are considered to be equal if they have the same content
            and are at the same location.
            </summary>
            <param name="a">The 1st chunk-element.</param>
            <param name="b">The 2nd chunk-element.</param>
            <returns></returns>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.ChunkElement.ElementValues">
            <summary>
            Gets an array of the value of the elements.
            </summary>
            <value>The element values.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.ChunkElement.StartIndex">
            <summary>
            Gets or sets the start index at which the chunk element has been met.
            </summary>
            <value>The start index.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.ChunkElement.EndIndex">
            <summary>
            Gets the end index of the chunk element.
            </summary>
            <value>The end index.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.ChunkElement.Content">
            <summary>
            Gets the content of the chunk element.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.ChunkElement.IsNumeric">
            <summary>
            Gets a value indicating whether this instance is numeric, i.e. the chunk-element itself is 
            made of digits.
            </summary>
            <value>
            	<c>true</c> if this instance is numeric; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.NumberSeperationException">
            <summary>
            An Exception class used internally by the <see cref="T:SCICT.NLP.Utility.Parsers.PersianRealNumberParser"/> class to process real number parsing.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.NumberSeperationException.#ctor(System.String,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.NumberSeperationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="index">The index at which the chunk should divided into two chunks.</param>
            <param name="number">The number parsed so far.</param>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.NumberSeperationException.Index">
            <summary>
            Gets the index at which the chunk should divided into two chunks.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.NumberSeperationException.ParsedNumber">
            <summary>
            Gets the number parsed so far, right before meeting the illegal chunk element.
            </summary>
            <value>The parsed number.</value>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.ListAndArrayExtensions">
            <summary>
            Provides extension methods for Array and List classes to make it more handy working with.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ListAndArrayExtensions.GetLastElement``1(``0[])">
            <summary>
            Returns the last element of an array.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source array to work with.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ListAndArrayExtensions.SetLastElement``1(``0[],``0)">
            <summary>
            Sets the last element of an array to the specified value.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source array to work with.</param>
            <param name="value">The value to be assigned to the last element of the array.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ListAndArrayExtensions.GetLastElement``1(System.Collections.Generic.List{``0})">
            <summary>
            Returns the last element of a list.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source List instance to work with.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ListAndArrayExtensions.SetLastElement``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Sets the last element of a List to the specified value.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source array to work with.</param>
            <param name="value">The value to be assigned to the last element of the List.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ListAndArrayExtensions.FindAllIndeces``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Finds all indeces at which the element of the specified List equals the specified key.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source List to work with.</param>
            <param name="key">The key value to look for in the List.</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.RegexPatternCreator">
            <summary>
            A Utility class to help create regular expression patterns programmatically. 
            Recommanded for creating expressions full of right-to-left stuff.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.CreateOR(System.Boolean,System.Object[])">
            <summary>
            Creates a string by seperating any of the arguments by Regex OR operator "|".
            The parameters can be string or an array of strings. For other objects their ToString()
            return value will be put.
            If the putEachInAGroup parameter is set to true then each of the items will be put inside
            parantheses (i.e. regex group operator), otherwise they will be put intact.
            The space characters inside each item will be replaced by a "white-space plus" pattern.
            </summary>
            <param name="putEachInAGroup">if set to <c>true</c> puts each item in a group 
            (i.e. inside parantheses).</param>
            <param name="args">The items that should be prefereably string or string array.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.CreateOR(System.Boolean,System.String[])">
            <summary>
            Creates a string by seperating any of the arguments by Regex OR operator "|".
            If the putEachInAGroup parameter is set to true then each of the items will be put inside
            parantheses (i.e. regex group operator), otherwise they will be put intact.
            The space characters inside each item will be replaced with a "white-space plus" pattern.
            </summary>
            <param name="putEachInAGroup">if set to <c>true</c> puts each item in a group 
            (i.e. inside parantheses).</param>
            <param name="args">The items.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.ResolveSpacePattern(System.String)">
            <summary>
            Resolves the space pattern in the given string. 
            The space characters inside the given string will be replaced with a "white-space plus" pattern.
            </summary>
            <param name="str">The string.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.CreateGroup(System.String,System.String[])">
            <summary>
            Creates a regex group with an optional name. A regex group is a pattern inside parantheses.
            If the group-name parameter is an empty string then the name part will not be created.
            The content strings will be simply concatenated together.
            </summary>
            <param name="grpName">Name of the group.</param>
            <param name="args">The content arguments which will be concatenated to form the group content.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.ClosurePlus(System.String)">
            <summary>
            Creates the plus closure pattern for the given string (i.e. (pat)+ ).
            If the string is not inside a group, it will be put inside a group first.
            </summary>
            <param name="pat">The input pattern.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.ClosureStar(System.String)">
            <summary>
            Creates the star closure pattern for the given string (i.e. (pat)* ).
            If the string is not inside a group, it will be put inside a group first.
            </summary>
            <param name="pat">The input pattern.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.ClosureQuestionMark(System.String)">
            <summary>
            Creates the optional closure pattern for the given string (i.e. (pat)? ).
            If the string is not inside a group, it will be put inside a group first.
            </summary>
            <param name="pat">The input pattern.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.ClosureExactNum(System.String,System.Int32)">
            <summary>
            Creates the exact repetition closure pattern for the given string (i.e. (pat){n} ).
            If the string is not inside a group, it will be put inside a group first.
            </summary>
            <param name="pat">The input pattern.</param>
            <param name="n">The number</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.ClosureAtLeastNum(System.String,System.Int32)">
            <summary>
            Creates the at least repetition closure pattern for the given string (i.e. (pat){n,} ).
            If the string is not inside a group, it will be put inside a group first.
            </summary>
            <param name="pat">The input pattern.</param>
            <param name="n">The number</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.ClosureRangeNum(System.String,System.Int32,System.Int32)">
            <summary>
            Creates the range repetition closure pattern for the given string (i.e. (pat){min,max} ).
            If the string is not inside a group, it will be put inside a group first.
            </summary>
            <param name="pat">The input pattern.</param>
            <param name="min">The min number</param>
            <param name="max">The max number</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.RegexPatternCreator.IsEnclosedInParantheses(System.String)">
            <summary>
            Determines whether the specified string is enclosed in parantheses. 
            (e.g. returns true for "(..)", and false for "(..)(..)".
            </summary>
            <param name="str">The given string.</param>
            <returns>
            	<c>true</c> if the specified string is enclosed in parantheses; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.BetWordWSChars">
            <summary>
            The whitespace characters that can occur between words (not inside them).
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.InWordWSChar">
            <summary>
            The half-space character. In other words, the white-space that can occur inside words.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.BetWordWS">
            <summary>
            The regex representation of the set of whitespace characters that can occur between words (not inside them).
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.InWordWS">
            <summary>
            The regex representation of the set of whitespace characters that can occur both between and inside words.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.InWordWSStar">
            <summary>
            The regex representation of the star closure of the set of whitespace characters that can occur both between and inside words.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.InWordWSPlus">
            <summary>
            The regex representation of the plus closure of the set of whitespace characters that can occur both between and inside words.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.BetWordWSStar">
            <summary>
            The regex representation of the star closure of the set of whitespace characters that can occur between words (not inside them).
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.RegexPatternCreator.BetWordWSPlus">
            <summary>
            The regex representation of the plus closure of the set of whitespace characters that can occur between words (not inside them).
            </summary>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher">
            <summary>
            This class matches and finds patterns occuring in the end of a string.
            It makes use of some special wild-card symbols which suits the Persian language more.
            For a list of the possible wild-cards see the "Symbolic Character Constants" region of the code.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SymbolHalfSpace">
            <summary>
            The character used to indicate a single half-space
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SymbolHalfSpaceQuestionMark">
            <summary>
            The character used to indicate an optional half-space
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SymbolSpacePlus">
            <summary>
            The character used to indicate one or more space characters
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SymbolSpaceStar">
            <summary>
            The character used to indicate zero or more space characters
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SymbolSpaceOrHalfSpace">
            <summary>
            The character used to indicate either space or half-space character
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SymbolSpaceOrHalfSpacePlus">
            <summary>
            The character used to indicate one or more space or half-space characters
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SymbolSpaceOrHalfSpaceStar">
            <summary>
            The character used to indicate zero or more space or half-space characters
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.HalfSpace">
            <summary>
            The standard half-space character used in Persian
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.m_listEndingPatterns">
            <summary>
            List of patterns that should be checked in the end of each input
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.m_listSearchNodes">
            <summary>
            List of search node which provide the means for reading from each ending pattern
            character by character or disable each node during the process.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.m_reverseStringReader">
            <summary>
            An instance of the <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader"/> class that helps 
            reading a string content in reverse order in linear time.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.m_postProcessRule">
            <summary>
            The delegate to post processing rules
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SetEndingPatterns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the ending patterns from the sequence of strings provided.
            </summary>
            <param name="patterns">The sequence of patterns to add.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.AddEndingPattern(System.String,System.Boolean)">
            <summary>
            Adds all possible pattern-combinations of an ending-pattern string
            to the list of ending patterns.
            </summary>
            <param name="pattern">The pattern string to add</param>
            <param name="checkDuplicates">if set to <c>true</c> checks duplicate patterns.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.AddAtomicEndingPattern(System.String,System.Boolean)">
            <summary>
            Adds the ending pattern directly to the list of ending-patterns if it
            has not been already added.
            </summary>
            <param name="pattern">The pattern to add.</param>
            <param name="checkDuplicates">if set to <c>true</c> checks duplicate patterns.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.GeneratePossiblePatterns(System.String)">
            <summary>
            Generates all possible non-optional patterns from a given pattern.
            e.g. A(Space*)B  --> AB , A(Space+)B
            </summary>
            <param name="pat">The input pattern.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseString(System.String)">
            <summary>
            Reverses the specified string.
            </summary>
            <param name="str">The string to reverse.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.AreCharactersEqual(System.Char,System.Char)">
            <summary>
            Determines whether the character from the pattern string can be
            equal to the character from the input string. The pattern string 
            can contain regex symbol characters. e.g. A space character can be 
            equal to Space+ symbol.
            </summary>
            <param name="chPattern">The character from pattern string.</param>
            <param name="chInput">The character from input string.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ResetSearchNodes">
            <summary>
            Resets the search nodes at the start of each pattern-matching operation.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SetPostProcessRule(SCICT.NLP.Utility.Parsers.ReversePatternMatcher.PostProcessRule)">
            <summary>
            Sets the post process rule. The rule is passed in the form of a delagate.
            </summary>
            <param name="ruleMethod">The post process rule method.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.Match(System.String)">
            <summary>
            Matches the input string with the ending patterns provided before and returns a
            sequence of <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo"/> objects which will hold information of the matched pattern.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.Match(System.String,System.Boolean)">
            <summary>
            Matches the input string with the ending patterns provided before and returns a
            sequence of <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo"/> objects which will hold information of the matched pattern.
            </summary>
            <param name="input">The input.</param>
            <param name="uniqueResults">if set to <c>true</c> returns unique results only.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.IsOptionalSymbol(System.Char)">
            <summary>
            Determines whether the specified symbolic character is an optional symbol. 
            Optional symbols are those that can occur or not, for example 
            star and question mark closures make a symbol optional.
            Here optional symbols are:
            <code>
                SymbolHalfSpaceQuestionMark
                SymbolSpaceOrHalfSpaceStar
                SymbolSpaceStar
            </code>
            </summary>
            <param name="ch">The character to check</param>
            <returns>
            	<c>true</c> if the specified symbolic character is an optional symbol; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.NonOptionalSymbolFor(System.Char)">
            <summary>
            Returns the non-optional version of the specified symbolic character if it is
            an optional symbolic character. 
            e.g. Non-optional version for Space-Star is Space-Plus.
            </summary>
            <param name="ch">The character to process</param>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.PostProcessRule">
            <summary>
            Use this delegate to pass methods which performs post-processing on returning results.
            </summary>
            <param name="baseWord">The base word to be modified.</param>
            <param name="suffix">The suffix to be modified.</param>
            <param name="baseWords">The new base words to be added.</param>
            <param name="suffixes">The new suffixes to be added.</param>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader">
            <summary>
            A Helper class that helps reading a string in the reverse order and checking the
            pattern symbols in a linear time.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader.inputString">
            <summary>
            The input string that is going to be read character by character
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader.readingIndex">
            <summary>
            The index at which the input string has been read
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader.inputStringLength">
            <summary>
            The length of the input string
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader.ReadFirstChar(System.String)">
            <summary>
            Initializes the reading-state variables and starts by returning the first character
            in reverse order.
            </summary>
            <param name="strInput">The input string.</param>
            <exception cref="T:System.ArgumentException">If the input string is null or empty</exception>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader.ReadNextChar">
            <summary>
            Reads the next character in the reverse order.
            This method does not necessarily read only one character. It may read 
            several characters if they make a symbol character. e.g. If a sequence of spaces
            are met a Space-Plus symbol is returned instead of them.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader.HasMoreChars">
            <summary>
            Determines whether there are characters left that are not read yet.
            </summary>
            <returns>
            	<c>true</c> if there are characters left that are not read yet; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader.GetCurrentIndex">
            <summary>
            Gets the index at which the string has been read so far.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.ReverseStringReader.ReadChar">
            <summary>
            Reads the next character in the reverse order. This method is 
            aware of <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher"/>'s special symbols, and returns 
            those symbols if the characters at the input string match the symbol.
            This method does not necessarily read only one character. It may read 
            several characters if they make a symbol character. e.g. If a sequence of spaces
            are met a Space-Plus symbol is returned instead of them.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode">
            <summary>
            Holds ending patterns, and provide the means for reading their content character
            by character, and makes it easy to enable and disable each node.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode.Index">
            <summary>
            The index at which the pattern string has been read.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode.Reset">
            <summary>
            Resets this instance, by setting Finished to false, and the reading index to 0.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode.GetChar">
            <summary>
            Gets the current character.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type. 
            The comparison is made based upon the nodes' pattern strings only.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. 
            The return value has these meanings: 
            Value Meaning Less than zero This instance is less than <paramref name="obj"/>. 
            Zero This instance is equal to <paramref name="obj"/>. 
            Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode.CreateSearchNodeList(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a sequence of search node list created from the specified ending-patterns.
            </summary>
            <param name="listPatterns">The list of ending-patterns.</param>
            <returns></returns>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode.Finished">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode"/> is 
            finished with being active in the list. A node is called Finished when its input is
            read completely or the input has no chance of matching the input string.
            </summary>
            <value><c>true</c> if finished; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.ReversePatternMatcher.SearchNode.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo">
            <summary>
            Holds information about the outputs from <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcher"/>.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo"/> class.
            It also applies some (hard-coded) word construction rules to the words.
            </summary>
            <param name="baseWord">The stem of the word.</param>
            <param name="suffix">The affix.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo.BaseWord">
            <summary>
            Gets or sets the body of the word.
            </summary>
            <value>The body of the word.</value>
        </member>
        <member name="P:SCICT.NLP.Utility.Parsers.ReversePatternMatcherPatternInfo.Suffix">
            <summary>
            Gets or sets the suffix part of the word.
            </summary>
            <value>The Suffix.</value>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.WordReadingUtility">
            <summary>
            Helps reading words inside a string in linear time.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.Parsers.WordReadingUtility.ReadWords(System.String,System.Boolean)">
            <summary>
            Reads the words from the input string and returns a sequence of words. 
            The <paramref name="isHalfSpaceADelim"/> parameter specifies that the half-space 
            character is considered as word-delimiter, or is considered as a typical character
            that can occur inside a word.
            </summary>
            <param name="input">The input string.</param>
            <param name="isHalfSpaceADelim">if set to <c>true</c> the half-space character is considered as a word delimiter.</param>
            <returns>The sequence of words inside the input string.</returns>
        </member>
        <member name="T:SCICT.NLP.Utility.Parsers.WordReadingUtility.CharState">
            <summary>
            Current State of characters currently being parsed
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.WordReadingUtility.CharState.WhiteSpace">
            <summary>
            Character is White Space
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.WordReadingUtility.CharState.Letter">
            <summary>
            Character is Letter
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.WordReadingUtility.CharState.Digit">
            <summary>
            Character is Digit
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.Parsers.WordReadingUtility.CharState.Other">
            <summary>
            Character is neither White-Space, Letter, nor Digit.
            </summary>
        </member>
        <member name="T:SCICT.NLP.Utility.PersianSentenceTokenizer">
            <summary>
             A sentence tokenizer for the Persian language.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.PersianSentenceTokenizer.EndOfLine">
            <summary>
            The order in the following definition is important
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.PersianSentenceTokenizer.Tokenize(System.String)">
            <summary>
            Tokenizes the specified string into sentences.
            </summary>
            <param name="s">The string to extract sentences from.</param>
            <returns></returns>
        </member>
        <member name="F:SCICT.NLP.Sentence.m_tags">
            <summary>
            Key: tag name; Value: per token array of tag objects
            </summary>
        </member>
        <member name="M:SCICT.NLP.Sentence.GetTagAt(System.Int32,System.String)">
            <summary>
            Get the tag for the specified token. 
            If the token is not already tagged, tries to find the proper tagger and calls it.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Sentence.GetTagAt``1(System.Int32,System.String)">
            <summary>
            Get the tag for the specified token.
            If the token is not already tagged, tries to find the proper tagger and calls it.
            </summary>
            <typeparam name="T">type of the tagger to perform type-casting.</typeparam>
            <param name="tokenIndex">Index of the token.</param>
            <param name="tagName">Name of the tag.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Sentence.GetTagAtNonWhitespace``1(System.Int32,System.String)">
            <summary>
            Gets the tag at non whitespace.
            </summary>
            <typeparam name="T">type of the tagger to perform type-casting.</typeparam>
            <param name="tokenIndex">Index of the token in an array of only non-whitespace tokens.</param>
            <param name="tagName">Name of the tag.</param>
            <returns></returns>
        </member>
        <member name="P:SCICT.NLP.Sentence.Tokens">
            <summary>
            Gets the tokens array (containing words, spaces, and punctuations).
            </summary>
        </member>
        <member name="P:SCICT.NLP.Sentence.NonWhitespaceTokens">
            <summary>
            Gets the non whitespace tokens (containing words and punctuations only).
            </summary>
        </member>
        <member name="T:SCICT.NLP.TokenInfo">
            <summary>
            This class must remain immutable
            </summary>
        </member>
        <member name="T:SCICT.NLP.Utility.StringUtil">
            <summary>
            String Utility Class, with special focus on Persian and Arabaic characters.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.StringUtil.s_persianCharFilter">
            <summary>
            A static reference to an instance of <see cref="T:SCICT.NLP.Persian.PersianCharFilter"/> class.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.#cctor">
            <summary>
            Initializes the <see cref="T:SCICT.NLP.Utility.StringUtil"/> class.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.ReplaceAllRegex(System.String,System.String,System.String)">
            <summary>
            Replaces all matches of the given regex pattern with the specified replacement pattern.
            </summary>
            <param name="str">The string to search and replace in.</param>
            <param name="regex">The regex pattern to be searched.</param>
            <param name="with">The string (or pattern) to be replaced.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.ReplaceAllRegex(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replaces all matches of the given regex pattern with the specified replacement pattern.
            </summary>
            <param name="str">The string to search and replace in.</param>
            <param name="regex">The regex pattern to be searched.</param>
            <param name="with">The string (or pattern) to be replaced.</param>
            <param name="ignoreCase">Specifies whether the character casing should be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.ReplaceFirstRegex(System.String,System.String,System.String)">
            <summary>
            Replaces the first instance of the found regex pattern with the specified replacement pattern.
            </summary>
            <param name="str">The string to search and replace in.</param>
            <param name="regex">The regex pattern to be searched.</param>
            <param name="with">The string (or pattern) to be replaced.</param>
            <param name="ignoreCase">Specifies whether the character casing should be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.ReplaceFirstRegex(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replaces the first instance of the found regex pattern with the specified replacement pattern.
            </summary>
            <param name="str">The string to search and replace in.</param>
            <param name="regex">The regex pattern to be searched.</param>
            <param name="with">The string (or pattern) to be replaced.</param>
            <param name="ignoreCase">Specifies whether the character casing should be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.ReplaceLastRegex(System.String,System.String,System.String)">
            <summary>
            Replaces the last instance of the regex pattern found in the given string
            with the specified replacement pattern.
            </summary>
            <param name="str">The string to search and replace in.</param>
            <param name="regex">The regex pattern to be searched.</param>
            <param name="with">The string (or pattern) to be replaced.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.MatchesRegex(System.String,System.String)">
            <summary>
            Specified whether the given string matcheses the given regex pattern.
            </summary>
            <param name="str">The string to search and replace in.</param>
            <param name="pattern">The regex pattern to be searched.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.MatchesRegex(System.String,System.String,System.Boolean)">
            <summary>
            Specified whether the given string matcheses the given regex pattern.
            </summary>
            <param name="str">The string to search and replace in.</param>
            <param name="pattern">The regex pattern to be searched.</param>
            <param name="ignoreCase">Specifies whether the character casing should be ignored.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.ExtractNonArabicContent(System.String)">
            <summary>
            Extracts the non arabic content. The return value includes none of the 
            arabic characters in the input string.
            </summary>
            <param name="word">The word</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.FirstWordCharIndex(System.String)">
            <summary>
            Returns the index of the first word-character in the given string.
            It skips the white-space and pseudo-spaces ocurring at the begginning of the string
            and returns the index of the first instance of the non-space character.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.LastWordCharIndex(System.String)">
            <summary>
            Returns the index of the last word-character in the given string.
            It skips the white-space and pseudo-spaces ocurring at the end of the string
            and returns the index of the last instance of the non-space character.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsWhiteSpace(System.Char)">
            <summary>
            Determines whether is white space the specified character.
            </summary>
            <param name="ch">The character.</param>
            <returns>
            	<c>true</c> if the specified character is white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.MakeStringVisible(System.String)">
            <summary>
            Returns a visible version of the string, by making
            its whitespace and control characters visible
            using well known escape sequences, or the equivalant 
            hexa decimal value.
            </summary>
            <param name="str">The string to be made visible.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the specified string includes only white space characters.
            </summary>
            <param name="word">The input string.</param>
            <returns>
            	<c>true</c> if the specified string contains only white space characters; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.TrimWithControlChars(System.String)">
            <summary>
            Trims a string, by removing whitespace chars as well as control chars.
            </summary>
            <param name="word">The word to trim.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.TrimStartWithControlChars(System.String)">
            <summary>
            Trims the start of the string, by removing whitespace chars as well as control chars.
            </summary>
            <param name="word">The word to trim.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.TrimEndWithControlChars(System.String)">
            <summary>
            Trims end of the string, by removing whitespace chars as well as control chars.
            </summary>
            <param name="word">The word to trim.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.TrimOnlyControlChars(System.String)">
            <summary>
            Trims a string only considering control chars.
            i.e. it does not remove whitespace chars.
            </summary>
            <param name="word">The word to trim.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.TrimStartOnlyControlChars(System.String)">
            <summary>
            Trims the start of a string only considering control chars.
            i.e. it does not remove whitespace chars.
            </summary>
            <param name="word">The word to trim.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.TrimEndOnlyControlChars(System.String)">
            <summary>
            Trims the end of a string only considering control chars.
            i.e. it does not remove whitespace chars.
            </summary>
            <param name="word">The word to trim.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.TrimStartArabicWord(System.String)">
            <summary>
            Trims the beginning of the arabic word. It trims and removes leading white-spaces,
            together with the half spaces.
            TrimStart means Trim-Left in English (i.e. Left to Right) Context.
            </summary>
            <param name="word">The input word</param>
            <returns>The input string that its beginning characters has been trimmed.</returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.TrimEndArabicWord(System.String)">
            <summary>
            Trims the end of an Arabic word. It trims and removes trailing white-spaces,
            together with the half spaces.
            TrimEnd means trim-right in English (i.e. Left to Right) context.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.TrimEndArabicWord(System.String,System.Int32@)">
            <summary>
            Trims the end of an Arabic word. It trims and removes trailing white-spaces,
            together with the half spaces.
            TrimEnd means trim-right in English (i.e. Left to Right) context.
            </summary>
            <param name="word">The word.</param>
            <param name="numChanges">The number of changes.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.NormalizeSpacesAndHalfSpacesInWord(System.String)">
            <summary>
            Normalizes the spaces and half spaces in word.
            It trims the word, removes trailing and leading spaces and half-spaces,
            and replaces multiple occurrences of half-spaces with only one half-space.
            Also half-spaces right after Persian/Arabic separate characters are removed.
            For example, half spaces after "Daal" are completely removed.
            </summary>
            <param name="word">The word</param>
            <returns>The normalized copy of the input string.</returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.NormalizeSpacesAndHalfSpacesInWord(System.String,System.Int32@)">
            <summary>
            Normalizes the spaces and half spaces in word.
            It trims the word, removes trailing and leading spaces and half-spaces,
            and replaces multiple occurrences of half-spaces with only one half-space.
            Also half-spaces right after Persian/Arabic separate characters are removed.
            For example, half spaces after "Daal" are completely removed.
            </summary>
            <param name="word">The word</param>
            <param name="numChanges">The number of changes made.</param>
            <returns>The normalized copy of the input string.</returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.WordCountTillIndex(System.String,System.Int32,System.Boolean)">
            <summary>
            returns the number of words that can be counter until we reach the given index.
            This can be done ignoring erabs (and mid-word spaces) or not.
            If <code>includeErabs</code> is true, the counting occurs normally, otherwise it is 
            assumed that we want to count in the refined version of the input string. In this case 
            the input string might contain erabs and mid-word spaces, but we assume that <code>index</code>
            is provided from a refined version of this string, so the method ignores erabs and mid-word
            spaces while counting.
            </summary>
            <param name="exp">input string</param>
            <param name="index">if <code>includeErabs</code> is true index in the given string,
            otherwise index in the refined version of the string</param>
            <param name="includeErabs">if true counts erabs and mid-word spaces as characters, 
            otherwise works as if erabs and mid-word spaces do not exist, index is also
            passed to the function from a refined version of the string.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.WordCountTillIndex(System.String,System.Int32)">
            <summary>
            Returns the number of word in the expression in which or before which the index occurs
            Since it is a count it can be regarded as a 1-based index.
            [Seemingly this method is not used]
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.WordStartIndex(System.String,System.Int32)">
            <summary>
            returns the start index of the nth word in the expression
            if the expression contains less word than n then the function returns -1
            by word we mean characters between two whitespaces. e.g. "[123]" is one word
            and "[ 123]" is two words.
            </summary>
            <param name="exp">The input string</param>
            <param name="n">0-based index of the word</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.WordEndIndex(System.String,System.Int32)">
            <summary>
            returns the end index of the nth word in the expression
            if the expression contains less words than n then the function returns -1
            by word we mean characters between two whitespaces. e.g. "[123]" is one word
            and "[ 123]" is two words.
            </summary>
            <param name="exp">The input string</param>
            <param name="n">0-based index of the word</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsInArabicWord(System.Char)">
            <summary>
            Determines whether a character can be observed inside an Arabic word.
            i.e. if it is Arabic Letter or Erab or Haf Space or Mid-word Space
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsArabicWord(System.String)">
            <summary>
            Determines whether the specified string is all consisting of arabic letters.
            </summary>
            <param name="str">The string.</param>
            <returns>
            <c>true</c> if the specified string is all consisting of arabic letters; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.RemoveMidWordSpace(System.String)">
            <summary>
            Removes the middle word spaces. Middle word spaces are characters that happen 
            in the middle of a word, but does not count as a word constructive character.
            e.g. مــــــن vs. من
            </summary>
            <param name="word">The input word</param>
            <returns>A copy of the input string with its mid-word-spaces removed.</returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsMidNumberChar(System.Char)">
            <summary>
            Determines whether the specified character can occur in the middle of a number.
            This does not include digits. E.g. 'e' can happen in a scientific form number, or 
            '.' and '/' are English and Persian/Arabic floating points respectively.
            </summary>
            <param name="ch">The character</param>
            <returns>
            	<c>true</c> if the specified character can occur in the middle of a number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.RemoveErab(System.String)">
            <summary>
            Removes the erab characters from the input string except tashdid and fathatan
            </summary>
            <param name="word">The word to remove erab from</param>
            <returns>The copy of the input string with its erab removed</returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.RemoveErabIncludingFathatan(System.String)">
            <summary>
            Removes the erab characters from the input string including tashdid and fathatan
            </summary>
            <param name="word">The word to remove erab from</param>
            <returns>The copy of the input string with its erab removed</returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.RefineAndFilterPersianChar(System.Char)">
            <summary>
            Refines and filters Persian char. If the character is Erab or Mid-Word-Space it is removed.
            If it is a non standard Persian character it is replaced with its standard equivalant char(s).
            </summary>
            <param name="ch">The character</param>
            <returns>A string containing the standard equivalant of the input character; or an empty string
            if the charactered is either erab or mid-word-space character.</returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.RefinePersianWord(System.String)">
            <summary>
            Trims and normalizes spaces and half-spaces and removes both Erab and Mid-Spaces.
            It does NOT apply Persian Char Filters.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsNonStickingPersianChar(System.Char)">
            <summary>
            Determines whether the specified character is a non-sticking persian character, 
            such as "و", "ر" and so on.
            </summary>
            <param name="ch">The character to inspect.</param>
            <returns>
            	<c>true</c> if the specified character is a non-sticking persian character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.OldIndexInRefinedString(System.String,System.Int32)">
            <summary>
            What would be the char index in the refined version of the string
            </summary>
            <param name="str">The not refined string; string should be trimmed beforehand.</param>
            <param name="index">index in the not refined string</param>
            <returns>corresponding index in the refined string</returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.OldIndexInNotRefinedStringOld(System.String,System.Int32)">
            <summary>
            Gets the char index in the original not-refined version of the refined string
            </summary>
            <param name="strNotRefined">The NOT refined string; string should be trimmed beforehand.</param>
            <param name="indexInRefined">index in the refined string</param>
            <returns>corresponding index in the not refined string</returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IndexInNotFilterAndRefinedString(System.String,System.Int32)">
            <summary>
            Gets the char index in the original not-refined version of the refined string
            </summary>
            <param name="strNotRefined">The NOT refined string; string should be trimmed beforehand.</param>
            <param name="indexInRefined">index in the refined string</param>
            <returns>corresponding index in the not refined string</returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.RefineAndFilterPersianWord(System.String)">
            <summary>
            Trims and normalizes spaces and half-spaces and removes both Erab and Mid-Spaces
            and applies Persian Char Filters.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.OldRefineAndFilterPersianWord(System.String)">
            <summary>
            Trims and normalizes spaces and half-spaces and removes both Erab and Mid-Spaces
            and applies Persian Char Filters.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.FilterPersianWord(System.String)">
            <summary>
            Filters the characters in the word, e.g. replaces non-standard Kaaf, and Yaa
            and half-spaces with the standard version.
            It does NOT remove erabs or mid-word-spaces.
            </summary>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.FilterPersianWord(System.String,SCICT.NLP.Persian.FilteringCharacterCategory)">
            <summary>
            Filters the persian word, ignoring some categories.
            </summary>
            <param name="word">The word</param>
            <param name="ignoreCats">The categories to IGNORE</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.FilterPersianWord(System.String,System.Collections.Generic.HashSet{System.Char})">
            <summary>
            Filters the Persian word, ignoring a set of characters.
            </summary>
            <param name="word">The word</param>
            <param name="ignoreList">The set of characters to be ignored.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.FilterPersianWord(System.String,System.Collections.Generic.HashSet{System.Char},SCICT.NLP.Persian.FilteringCharacterCategory)">
            <summary>
            Filters the Persian word, ignoring a set of characters, and ignoring some categories.
            </summary>
            <param name="word">The word</param>
            <param name="ignoreList">The set of characters to be ignored.</param>
            <param name="ignoreCats">The categories to IGNORE</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.FilterPersianWordWithStats(System.String,System.Collections.Generic.HashSet{System.Char},SCICT.NLP.Persian.FilteringCharacterCategory)">
            <summary>
            Filters the given string with the given options while returning the filtered string as well as filtering statistics.
            </summary>
            <param name="str">The string to filter.</param>
            <param name="ignoreList">list of characters to ignore.</param>
            <param name="ignoreCats">The character-categories to ignore.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.ConvertShortHeYeToLong(System.String)">
            <summary>
            Converts the instanecs of short HeYe to long.
            </summary>
            <param name="word">The word to change.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.NormalizeShortHeYe(System.String)">
            <summary>
            Normalizes instances of short-heye. It does not convert short HeYe's to long.
            It only normalizes instances of short-HeYe writings to the standard form.
            </summary>
            <param name="word">The word to change.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.UnicodeNormalize(System.String)">
            <summary>
            Returns a new string whose textual value is the same as input string, but whose binary representation is in Unicode normalization form C.
            </summary>
            <param name="word">A string instance to be normalized</param>
            <remarks>It's just a wrapper over the Normalize method of .NET</remarks>
            <returns>
            A new, normalized string whose textual value is the same as input string, but whose binary representation is in normalization form C.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.UnicodeNormalize(System.String,System.Text.NormalizationForm)">
             <summary>
             Returns a new string whose textual value is the same as input string, but whose binary representation is in the specified Unicode normalization form.
             </summary>
             <param name="word">A string instance to be normalized</param>
             <param name="normalizationForm">A Unicode normalization form. </param>
             <returns>A new string whose textual value is the same as input string, but whose binary representation is in the normalization form specified by the <paramref name="normalizationForm"/> parameter. 
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.ConvertLongHeYeToShort(System.String)">
            <summary>
            Converts instance of long HeYe to short.
            </summary>
            <param name="word">The word to change.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.NormalizeLongHeYe(System.String)">
            <summary>
            Normalizes instances of long-heye. It does not convert long HeYe's to short.
            It only normalizes instances of long-HeYe writings to the standard form.
            </summary>
            <param name="word">The word to change.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsArabicLetter(System.Char)">
            <summary>
            Determines whether the specified character is an Arabic letter.
            </summary>
            <param name="ch">The character</param>
            <returns>
            	<c>true</c> if the specified character is an Arabic letter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsYe(System.Char)">
            <summary>
            Determines whether the specified character is a form of Ye character, either standard, or non-standard.
            </summary>
            <param name="ch">The character to check.</param>
            <returns>
            	<c>true</c> if the specified character is Ye; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsHalfSpace(System.Char)">
            <summary>
            Determines whether the specified character is a half-space character.
            </summary>
            <param name="ch">The character</param>
            <returns>
            	<c>true</c> if the specified character is a half-space character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsHalfSpace(System.String)">
            <summary>
            Determines whether the specified string is all made up of half-space characters.
            </summary>
            <param name="str">The string to test.</param>
            <returns>
            	<c>true</c> if the specified string is all made up of half-space character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsMidWordSpace(System.Char)">
            <summary>
            Determines whether the specified character, is mid-word-space.
            </summary>
            <param name="ch">The ch.</param>
            <returns>
            	<c>true</c> if the specified character, is mid-word-space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsArabicScriptDigit(System.Char)">
            <summary>
            Determines whether the specified character is an Arabic or Persian digit.
            </summary>
            <param name="ch">The character</param>
            <returns>
            	<c>true</c> if the specified character is an Arabic or Persian digit; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsPersianDigit(System.Char)">
            <summary>
            Determines whether the specified character is a Persian digit.
            </summary>
            <param name="ch">The character</param>
            <returns>
                <c>true</c> if the specified character is a Persian digit; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsEnglishDigit(System.Char)">
            <summary>
            Determines whether the specified character is an English digit.
            </summary>
            <param name="ch">The character</param>
            <returns>
                <c>true</c> if the specified character is an English digit; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsArabicDigit(System.Char)">
            <summary>
            Determines whether the specified character is an Arabic digit.
            </summary>
            <param name="ch">The character</param>
            <returns>
                <c>true</c> if the specified character is an Arabic digit; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsNumberInPersianDigits(System.String)">
            <summary>
            Determines whether the specified string containing a number in digits is completely 
            written in Persian digits.
            </summary>
            <param name="str">The string containing number</param>
            <returns>
                <c>true</c> if the specified string containing a number in digits is completely 
            written in Persian digits, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsArabicPunctuation(System.Char)">
            <summary>
            Determines whether the specified character is Arabic punctuation.
            </summary>
            <param name="ch">The ch.</param>
            <returns>
            	<c>true</c> if the specified character is Arabic punctuation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsParagraphDelimiter(System.Char)">
            <summary>
            Determines whether the specified character is an MS-Word paragraph delimiter.
            </summary>
            <param name="ch">The character</param>
            <returns>
            	<c>true</c> if the specified character is an MS-Word paragraph delimiter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsSentenceDelimiter(System.Char)">
            <summary>
            Determines whether the specified character is sentence delimiter.
            </summary>
            <param name="ch">The character</param>
            <returns>
            	<c>true</c> if the specified character is sentence delimiter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsErabSign(System.Char)">
            <summary>
            Determines whether the specified character is an erab sign.
            </summary>
            <param name="ch">The character</param>
            <returns>
            	<c>true</c> if the specified character is an erab sign; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsErabSignExceptFathatan(System.Char)">
            <summary>
            Determines whether the specified character is an erab sign except fathatan.
            </summary>
            <param name="ch">The character to check.</param>
            <returns>
            	<c>true</c> if the specified character is an erab sign except fathatan; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.StringStartsWithOneOf(System.String,System.String)">
            <summary>
            Determines whether the specified string starts 
            with one of the characters in the second string.
            </summary>
            <param name="str">The string to be processed</param>
            <param name="chars">The string containing characters to be compared against</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.StringIsASentenceDelim(System.String)">
            <summary>
            Determines whether a string is a sentence delimiter.
            </summary>
            <param name="str">The string.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.StringIsAParagraphDelim(System.String)">
            <summary>
            Determines whether a string is a paragraph delimiter.
            </summary>
            <param name="str">The string.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.ExtractPersianSentences(System.String)">
            <summary>
            Extracts the persian sentences.
            Note that the sentences are neither trimmed nor normalized.
            </summary>
            <param name="text">The text to extract sentences from.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsWordDelimiter(System.Char)">
            <summary>
            Determines whether the specified character, is word delimiter.
            </summary>
            <param name="ch">The character</param>
            <returns>
            	<c>true</c> if the specified character, is word delimiter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.ExtractPersianWordsBase(System.String,System.Boolean)">
            <summary>
            The base method that extracts the Persian words from a string of words.
            </summary>
            <param name="line">The string of words.</param>
            <param name="useCharFilter">if set to <c>true</c> uses Persian char 
            filter to refine the extracted words.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.ExtractPersianWords(System.String)">
            <summary>
            Extracts the Persian words, without applying Persian word filters to them.
            </summary>
            <param name="line">The string of words.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.ExtractPersianWordsStandardized(System.String)">
            <summary>
            Extracts the Persian words, and applies Persian word filters to them.
            </summary>
            <param name="line">The string of words.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.StringIsADelim(System.String,System.Boolean)">
            <summary>
            Determines whether the specified string is a sentence or paragraph delimiter.
            </summary>
            <param name="str">The string</param>
            <param name="isParagraph">if set to <c>true</c> checks for the being paragraph, 
            otherwise checks for being sentence.</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.StringFromCodes(System.Int32[])">
            <summary>
            Gets a String by concatenating codes from parameters.
            </summary>
            <param name="charCodes">The integer char codes</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.StringContainsAny(System.String,System.Int32,System.Char[],System.Int32@)">
            <summary>
            Checks whether the specified string contains any of the characters within the
            specified character array.
            </summary>
            <param name="str">The string to check.</param>
            <param name="startIndex">The start index.</param>
            <param name="chars">The character array to look for.</param>
            <param name="index">The index of the found character or -1 if no such character is found.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.StringContainsAny(System.String,System.Char[],System.Int32@)">
            <summary>
            Checks whether the specified string contains any of the characters within the 
            specified character array.
            </summary>
            <param name="str">The string to check.</param>
            <param name="chars">The character array to look for.</param>
            <param name="index">The index of the found character or -1 if no such character is found.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.StringContainsAny(System.String,System.Char[])">
            <summary>
            Checks whether the specified string contains any of the characters within the 
            specified character array.
            </summary>
            <param name="str">The string to check.</param>
            <param name="chars">The character array to look for.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsAnEnglishLetter(System.Char)">
            <summary>
            Determines whether the specified character is an English character.
            </summary>
            <param name="ch">The character</param>
            <returns>
            	<c>true</c> if the specified character is an English character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:SCICT.NLP.Utility.StringUtil.OneLetterPinglishWords">
            <summary>
            The characters who (may) represent a whole word in pinglish.
            </summary>
            <remarks>All characters are in lowercase.</remarks>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsPinglishWord(System.String)">
            <summary>
            Determines whether the specified word is a pinglish word.
            </summary>
            <param name="word">The word.</param>
            <returns>
            	<c>true</c> if the specified word is pinglish word; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsSingleQuote(System.Char)">
            <summary>
            Determines whether the given character represents Single Quotation marks (or similar characters like 'Prime')
            </summary>
            <param name="ch">the character to check</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsDecimalSeparator(System.Char)">
            <summary>
            Determines whether the specified character is a decimal separator character.
            </summary>
            <param name="ch">The ch.</param>
            <returns>
            	<c>true</c> if the specified character is a decimal separator character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsThousandSeparator(System.Char)">
            <summary>
            Determines whether the specified character is thousand-separator.
            </summary>
            <param name="ch">The ch.</param>
            <returns>
            	<c>true</c> if the specified character is thousand-separator; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsEndOfSentencePunctuation(System.Char)">
            <summary>
            Determines whether the specified character is an end-of-sentence punctuation.
            </summary>
            <param name="ch">The character.</param>
            <returns>
              <c>true</c> if the specified character is an end-of-sentence punctuation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsNewLine(System.Char)">
            <summary>
            Determines whether the specified character is a new-line indicator.
            </summary>
            <param name="ch">The character.</param>
            <returns>
              <c>true</c> if the specified character is a new-line indicator; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsWhiteSpaceExceptNewLine(System.Char)">
            <summary>
            Determines whether the specified character is white-space except new line.
            </summary>
            <param name="ch">The character.</param>
            <returns>
              <c>true</c> if the specified character is white-space except new line; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsOpenningPunctuation(System.Char)">
            <summary>
            Determines whether the specified character is an openning punctuation.
            </summary>
            <param name="ch">The character to check.</param>
            <returns>
              <c>true</c> if the specified character is an openning punctuation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsClosingPunctuation(System.Char)">
            <summary>
            Determines whether the specified character is a closing punctuation.
            </summary>
            <param name="ch">The character.</param>
            <returns>
              <c>true</c> if the specified character is a closing punctuation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.IsSymmetricPunctuation(System.Char)">
            <summary>
            Determines whether the specified character is a symmetric punctuation.
            </summary>
            <param name="ch">The character.</param>
            <returns>
              <c>true</c> if the specified character is a symmetric punctuation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.ExtractWords(System.String)">
            <summary>
            Extracts words from the specified string of words. This is a general word extraction method.
            To extract words from Persian sentences specificaly call 
            <c>ExtractPersianWords</c> and <c>ExtractPersianWordsStandardized</c>.
            </summary>
            <param name="line">string of words to extract words from</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.ExtractParagraphs(System.String)">
            <summary>
            Extracts paragraphs from a given text. "\n" and "\r" characters or both are paragraph delimiters. 
            The delimiters themselves are not returned.
            </summary>
            <param name="text">The text to extract Paragraphs from.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.ExtractParagraphs(System.String,System.Boolean)">
            <summary>
            Extracts paragraphs from a given text. "\n" and "\r" characters or both are paragraph delimiters. 
            </summary>
            <param name="text">The text to extract Paragraphs from.</param>
            <param name="returnDelimiters">if <c>true</c> the paragraph delimiters are returned as a separate paragraph, 
            otherwise the delimiters are not returned.</param>
            <returns></returns>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.FindAll(System.String,System.String,System.Int32[]@,System.Int32[]@)">
            <summary>
            Finds all instances of the "value" within the given string "str",
            and outputs the corresponding indices of start and end characters.
            The original value of the strings are used for search, not the
            standardized versions. The search does not respect word boundaries.
            </summary>
            <param name="str">the string to search inside</param>
            <param name="value">the string to be searched against str</param>
            <param name="inds">array of the found patterns start indices</param>
            <param name="ends">array of the found patterns end indices</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.FindAllWords(System.String,System.String,System.Int32[]@,System.Int32[]@)">
            <summary>
            Finds all instances of the "value" within the given string "str",
            and outputs the corresponding indices of start and end characters.
            The original value of the strings are used for search, not the
            standardized versions. The search does respects word boundaries.
            </summary>
            <param name="str">the string to search inside</param>
            <param name="value">the string to be searched against str</param>
            <param name="inds">array of the found patterns start indices</param>
            <param name="ends">array of the found patterns end indices</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.FindAllCaseInsensitive(System.String,System.String,System.Int32[]@,System.Int32[]@)">
            <summary>
            Finds all instances of the "value" within the given string "str",
            ignoring the character case, and outputs the corresponding indices 
            of start and end characters.
            The original value of the strings are used for search, not the
            standardized versions. The search does not respect word boundaries.
            </summary>
            <param name="str">the string to search inside</param>
            <param name="value">the string to be searched against str</param>
            <param name="inds">array of the found patterns start indices</param>
            <param name="ends">array of the found patterns end indices</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.FindAllWordsCaseInsensitive(System.String,System.String,System.Int32[]@,System.Int32[]@)">
            <summary>
            Finds all instances of the "value" within the given string "str",
            ignoring the character case, and outputs the corresponding indices 
            of start and end characters.
            The original value of the strings are used for search, not the
            standardized versions. The search respects word boundaries.
            </summary>
            <param name="str">the string to search inside</param>
            <param name="value">the string to be searched against str</param>
            <param name="inds">array of the found patterns start indices</param>
            <param name="ends">array of the found patterns end indices</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.FindAllStandardized(System.String,System.String,System.Int32[]@,System.Int32[]@)">
            <summary>
            Finds all instances of the "value" within the given string "str",
            and outputs the corresponding indices of start and end characters.
            The standardized value of the strings are used for search. 
            The search does not respect word boundaries.
            </summary>
            <param name="str">the string to search inside</param>
            <param name="value">the string to be searched against str</param>
            <param name="inds">array of the found patterns start indices</param>
            <param name="ends">array of the found patterns end indices</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.FindAllWordsStandardized(System.String,System.String,System.Int32[]@,System.Int32[]@)">
            <summary>
            Finds all word instances with the content of "value" within the given 
            string "str", and outputs the corresponding indices of start and end characters.
            The standardized value of the strings are used for search. 
            The search does respects word boundaries.
            </summary>
            <param name="str">the string to search inside</param>
            <param name="value">the word content to be searched against str</param>
            <param name="inds">array of the found patterns start indices</param>
            <param name="ends">array of the found patterns end indices</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.FindAllRegexp(System.String,System.String,System.Int32[]@,System.Int32[]@)">
            <summary>
            Finds all instances of the regular expression pattern within the given string "str",
            and outputs the corresponding indices of start and end characters.
            The original value of the strings are used for search, not the standardized version. 
            The search does not respect word boundaries.
            </summary>
            <param name="str">the string to search inside</param>
            <param name="regexp">the regexp pattern to be searched against str</param>
            <param name="inds">array of the found patterns start indices</param>
            <param name="ends">array of the found patterns end indices</param>
        </member>
        <member name="M:SCICT.NLP.Utility.StringUtil.FindAllRegexpStandardized(System.String,System.String,System.Int32[]@,System.Int32[]@)">
            <summary>
            Finds all instances of the regular expression pattern within the given string "str",
            and outputs the corresponding indices of start and end characters.
            The standardized value of the strings are used for search. 
            The search does not respect word boundaries.
            </summary>
            <param name="str">the string to search inside</param>
            <param name="regexp">the regexp pattern to be searched against str</param>
            <param name="inds">array of the found patterns start indices</param>
            <param name="ends">array of the found patterns end indices</param>
        </member>
        <member name="F:SCICT.NLP.Utility.WordTokenizerOptions.ReturnWhitespacesCharacterByCharacter">
            <summary>
            Returns whitespace chunks character by character instead of returning them all in a single token.
            </summary>
        </member>
        <member name="F:SCICT.NLP.Utility.WordTokenizerOptions.ReturnPunctuationsCharacterByCharacter">
            <summary>
            Returns punctuation chunks character by character instead of returning them all in a single token.
            </summary>
        </member>
        <member name="T:SCICT.NLP.Utility.WordTokenizer">
            <summary>
            A general purpose (English, or Persian), customizable, and fast word tokenizer
            </summary>
        </member>
    </members>
</doc>
